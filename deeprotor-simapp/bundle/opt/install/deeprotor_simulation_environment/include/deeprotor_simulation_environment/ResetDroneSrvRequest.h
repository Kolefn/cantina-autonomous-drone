// Generated by gencpp from file deeprotor_simulation_environment/ResetDroneSrvRequest.msg
// DO NOT EDIT!


#ifndef DEEPROTOR_SIMULATION_ENVIRONMENT_MESSAGE_RESETDRONESRVREQUEST_H
#define DEEPROTOR_SIMULATION_ENVIRONMENT_MESSAGE_RESETDRONESRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deeprotor_simulation_environment
{
template <class ContainerAllocator>
struct ResetDroneSrvRequest_
{
  typedef ResetDroneSrvRequest_<ContainerAllocator> Type;

  ResetDroneSrvRequest_()
    : ndist(0.0)
    , next_index(0)  {
    }
  ResetDroneSrvRequest_(const ContainerAllocator& _alloc)
    : ndist(0.0)
    , next_index(0)  {
  (void)_alloc;
    }



   typedef float _ndist_type;
  _ndist_type ndist;

   typedef int32_t _next_index_type;
  _next_index_type next_index;





  typedef boost::shared_ptr< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResetDroneSrvRequest_

typedef ::deeprotor_simulation_environment::ResetDroneSrvRequest_<std::allocator<void> > ResetDroneSrvRequest;

typedef boost::shared_ptr< ::deeprotor_simulation_environment::ResetDroneSrvRequest > ResetDroneSrvRequestPtr;
typedef boost::shared_ptr< ::deeprotor_simulation_environment::ResetDroneSrvRequest const> ResetDroneSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace deeprotor_simulation_environment

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eff28ed986b58db32d8bdead6e257efe";
  }

  static const char* value(const ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeff28ed986b58db3ULL;
  static const uint64_t static_value2 = 0x2d8bdead6e257efeULL;
};

template<class ContainerAllocator>
struct DataType< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deeprotor_simulation_environment/ResetDroneSrvRequest";
  }

  static const char* value(const ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "";
  }

  static const char* value(const ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {

    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetDroneSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deeprotor_simulation_environment::ResetDroneSrvRequest_<ContainerAllocator>& v)
  {

  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPROTOR_SIMULATION_ENVIRONMENT_MESSAGE_RESETDRONESRVREQUEST_H
