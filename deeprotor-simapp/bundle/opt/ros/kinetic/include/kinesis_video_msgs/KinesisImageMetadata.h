// Generated by gencpp from file kinesis_video_msgs/KinesisImageMetadata.msg
// DO NOT EDIT!


#ifndef KINESIS_VIDEO_MSGS_MESSAGE_KINESISIMAGEMETADATA_H
#define KINESIS_VIDEO_MSGS_MESSAGE_KINESISIMAGEMETADATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <diagnostic_msgs/KeyValue.h>

namespace kinesis_video_msgs
{
template <class ContainerAllocator>
struct KinesisImageMetadata_
{
  typedef KinesisImageMetadata_<ContainerAllocator> Type;

  KinesisImageMetadata_()
    : metadata()  {
    }
  KinesisImageMetadata_(const ContainerAllocator& _alloc)
    : metadata(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  _metadata_type;
  _metadata_type metadata;





  typedef boost::shared_ptr< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> const> ConstPtr;

}; // struct KinesisImageMetadata_

typedef ::kinesis_video_msgs::KinesisImageMetadata_<std::allocator<void> > KinesisImageMetadata;

typedef boost::shared_ptr< ::kinesis_video_msgs::KinesisImageMetadata > KinesisImageMetadataPtr;
typedef boost::shared_ptr< ::kinesis_video_msgs::KinesisImageMetadata const> KinesisImageMetadataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kinesis_video_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'kinesis_video_msgs': ['/tmp/binarydeb/ros-kinetic-kinesis-video-msgs-2.0.2/msg'], 'diagnostic_msgs': ['/opt/ros/kinetic/share/diagnostic_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bed809d676f785d0b0f3eb89897c74f7";
  }

  static const char* value(const ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbed809d676f785d0ULL;
  static const uint64_t static_value2 = 0xb0f3eb89897c74f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinesis_video_msgs/KinesisImageMetadata";
  }

  static const char* value(const ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# see https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/how-meta.html\n\
diagnostic_msgs/KeyValue[] metadata\n\
\n\
================================================================================\n\
MSG: diagnostic_msgs/KeyValue\n\
string key # what to label this value when viewing\n\
string value # a value to track over time\n\
";
  }

  static const char* value(const ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.metadata);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KinesisImageMetadata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinesis_video_msgs::KinesisImageMetadata_<ContainerAllocator>& v)
  {
    s << indent << "metadata[]" << std::endl;
    for (size_t i = 0; i < v.metadata.size(); ++i)
    {
      s << indent << "  metadata[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.metadata[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINESIS_VIDEO_MSGS_MESSAGE_KINESISIMAGEMETADATA_H
