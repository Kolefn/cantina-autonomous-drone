# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinesis_video_msgs/KinesisVideoFrame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import diagnostic_msgs.msg

class KinesisVideoFrame(genpy.Message):
  _md5sum = "27aa4ed7caa3f72619dd565fd09eddf0"
  _type = "kinesis_video_msgs/KinesisVideoFrame"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# see https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/how-data.html#how-data-header-frame
uint32 index

uint64 decoding_ts      # in microseconds
uint64 presentation_ts  # in microseconds
uint64 duration         # in microseconds

uint8[] codec_private_data
uint8[] frame_data
uint16 flags

# see https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/how-meta.html
diagnostic_msgs/KeyValue[] metadata

================================================================================
MSG: diagnostic_msgs/KeyValue
string key # what to label this value when viewing
string value # a value to track over time
"""
  __slots__ = ['index','decoding_ts','presentation_ts','duration','codec_private_data','frame_data','flags','metadata']
  _slot_types = ['uint32','uint64','uint64','uint64','uint8[]','uint8[]','uint16','diagnostic_msgs/KeyValue[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,decoding_ts,presentation_ts,duration,codec_private_data,frame_data,flags,metadata

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KinesisVideoFrame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = 0
      if self.decoding_ts is None:
        self.decoding_ts = 0
      if self.presentation_ts is None:
        self.presentation_ts = 0
      if self.duration is None:
        self.duration = 0
      if self.codec_private_data is None:
        self.codec_private_data = b''
      if self.frame_data is None:
        self.frame_data = b''
      if self.flags is None:
        self.flags = 0
      if self.metadata is None:
        self.metadata = []
    else:
      self.index = 0
      self.decoding_ts = 0
      self.presentation_ts = 0
      self.duration = 0
      self.codec_private_data = b''
      self.frame_data = b''
      self.flags = 0
      self.metadata = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I3Q().pack(_x.index, _x.decoding_ts, _x.presentation_ts, _x.duration))
      _x = self.codec_private_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frame_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.flags))
      length = len(self.metadata)
      buff.write(_struct_I.pack(length))
      for val1 in self.metadata:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.metadata is None:
        self.metadata = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.index, _x.decoding_ts, _x.presentation_ts, _x.duration,) = _get_struct_I3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.codec_private_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.frame_data = str[start:end]
      start = end
      end += 2
      (self.flags,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.metadata = []
      for i in range(0, length):
        val1 = diagnostic_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8')
        else:
          val1.value = str[start:end]
        self.metadata.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I3Q().pack(_x.index, _x.decoding_ts, _x.presentation_ts, _x.duration))
      _x = self.codec_private_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frame_data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.flags))
      length = len(self.metadata)
      buff.write(_struct_I.pack(length))
      for val1 in self.metadata:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.metadata is None:
        self.metadata = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.index, _x.decoding_ts, _x.presentation_ts, _x.duration,) = _get_struct_I3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.codec_private_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.frame_data = str[start:end]
      start = end
      end += 2
      (self.flags,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.metadata = []
      for i in range(0, length):
        val1 = diagnostic_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8')
        else:
          val1.value = str[start:end]
        self.metadata.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_I3Q = None
def _get_struct_I3Q():
    global _struct_I3Q
    if _struct_I3Q is None:
        _struct_I3Q = struct.Struct("<I3Q")
    return _struct_I3Q
