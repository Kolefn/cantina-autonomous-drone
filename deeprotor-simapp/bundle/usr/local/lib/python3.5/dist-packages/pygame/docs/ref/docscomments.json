[{"content": "How To Get ALL The Mouse Clicks.\n\nTook me hours to figure this out. Also note that button 1 and 3 pressed at the same time shows up as button 2, at least on my ubuntu computer.\n\ne=pygame.event.wait()\nif e.type == MOUSEBUTTONDOWN and e.button == 4 : do something mousey", "user_title": "Douglas Smith", "datetimeon": "2005-11-11T14:05:52", "link": "pygame.mouse.get_pressed", "id": 3}, {"content": "If you're trying to create a surface with per-pixel alphas, and\n\n  my_surface = pygame.Surface((w, h), SRCALPHA)\n\ncreates a regular surface instead, try\n\n  my_surface = pygame.Surface((w, h)).convert_alpha()", "user_title": "Marius Gedminas", "datetimeon": "2006-01-05T16:07:06", "link": "pygame.Surface", "id": 39}, {"content": "Interestingly, pygame.font.get_default_font() returns a font name ('freesansbold.ttf') which is not among the 189 listed by pygame.font.get_fonts().", "user_title": "Dave Burton", "datetimeon": "2011-01-03T08:47:41", "link": "pygame.font.get_fonts", "id": 3698}, {"content": "The font name is not a list!  It is a single string.\n\nThe string can contain multiple font names with commas between them,\nbut if you pass a Python list (or tuple) you'll get an error.", "user_title": "Dave Burton", "datetimeon": "2011-01-03T09:13:14", "link": "pygame.font.SysFont", "id": 3699}, {"content": "Re: \"During its lifetime, the PixelArray locks the surface, thus you explicitly have to delete it once its not used anymore and the surface should perform operations in the same scope.\"\n\n1. Grammer: s/its/it's/\n\n2. s/you explicitly have to delete/you have to explicitly delete/\n\n3. I assume that to explicitly delete it you can either use \"del pxarray\"\nor else simply exit the function to which pxarray is local.  Is that correct?\n\n4. What does \"and the surface should perform operations in the same scope\" mean?\nIs it saying something about the surface returned by px.make_surface(), i.e.,\nthat it should be a local variable in the same function  to which pxarray is local?\nOr is it saying something about the surface that is passed to pygame.PixelArray()\nto create the pxarray object, and if so WHAT is it saying?", "user_title": "Dave Burton", "datetimeon": "2011-01-07T03:08:20", "link": "pygame.PixelArray", "id": 3703}, {"content": "On my Windows Vista machine running Python 3.1.2 and pygame 1.9.1, pgame.font.get_fonts() returns a list of 189 fonts.  All the font names are lower case, and there are no special characters (like hyphens) in the names.  The expected 'timesnewroman', 'arial', 'arialblack', 'couriernew', 'veranda', 'microsoftsansserif', 'symbol' and 'wingdings' are there (but not 'times' or 'roman' or 'helvetica'), but also many obscure fonts that I've never heard of.", "user_title": "Dave Burton", "datetimeon": "2011-01-03T08:43:54", "link": "pygame.font.get_fonts", "id": 3697}, {"content": "Pretty cool demo Mr. Anony", "user_title": "Robert Leachman", "datetimeon": "2010-12-10T22:09:50", "link": "pygame.key.get_pressed", "id": 3683}, {"content": "If you want to see a list of attributes, do a help(pygame) and it'll show you", "user_title": "Alex Polosky", "datetimeon": "2010-12-15T23:46:38", "link": "pygame.locals", "id": 3686}, {"content": "Works fine for me on OS X 10.6.5, though yes it does need to brought up to Quartz", "user_title": "Robert Leachman", "datetimeon": "2010-12-04T21:54:48", "link": "pygame.display.init", "id": 3675}, {"content": "See tutorials.  \nAfter each line \n     pygame.image.load(\"&lt;&gt;\")\nMake it\n     pygame.image.load(\"&lt;&gt;\").convert()\nNo matter what, this will increase your speed by 600%!\nThanks to whoever put in that tutorial!\n     -P.Z.", "user_title": "Ian Mallett", "datetimeon": "2007-03-05T00:13:41", "link": "pygame.draw", "id": 403}, {"content": "see:\nhttp://www.pygame.org/docs/tut/newbieguide.html\n#4", "user_title": "Ian Mallett", "datetimeon": "2007-03-17T13:13:59", "link": "pygame.draw", "id": 439}, {"content": "Dear readers, here is a working example of MPEG playing.\n-tgfcoder\n\n\nimport pygame, time\n\npygame.init()\n\ncine = pygame.movie.Movie('a-movie.mpg')\nsz=cine.get_size()\npygame.display.set_mode(sz)\nscreen = pygame.display.get_surface()\ncine.set_display(screen)\ncine.play()\nwhile True:\n time.sleep(1)", "user_title": "Jordan Trudgett", "datetimeon": "2008-01-01T09:40:25", "link": "pygame.movie", "id": 1349}, {"content": "Oh, please replace pygame.init() with pygame.display.init()\nBecause we don't want the mixer to be initialised.", "user_title": "Jordan Trudgett", "datetimeon": "2008-01-01T09:46:24", "link": "pygame.movie", "id": 1350}, {"content": "Well, actually it's not even that (x,y) needs to be in the referential of the Rect, because if it was true, then (0,0) would return 1, and it doesn't. It is really a bug.", "user_title": "Guillaume Rava", "datetimeon": "2007-04-20T18:04:08", "link": "Rect.collidepoint", "id": 503}, {"content": "# Ellipse example:\n# When border=0 ellipse is filled\n#                  (screen, (rgb colour) (Xpos,Ypos,width,height),border width)\npygame.draw.ellipse(screen, (0, 127, 0), (300, 150, 80, 40), 0)", "user_title": "Miroslav Cika", "datetimeon": "2008-01-10T10:08:04", "link": "pygame.draw.ellipse", "id": 1392}, {"content": "# Circle example:\n# When border=0 circle is filled\n#                 (screen, (rgb colour), (Xpos,Ypos),Diameter,border width)\npygame.draw.circle(screen, (0, 127, 255), (300, 140), 50, 4)", "user_title": "Miroslav Cika", "datetimeon": "2008-01-10T10:20:38", "link": "pygame.draw.circle", "id": 1393}, {"content": "thank you Trudget for the working code", "user_title": "vishwanath", "datetimeon": "2008-01-13T13:38:10", "link": "pygame.movie", "id": 1407}, {"content": "\"\"\"It seems that this method does not detect point collisions that fall anywhere \nalong the right wall or bottom wall of the rect used. The following program\ncreates a rect with a width and height of 4, and a topleft corner at [0,0]. \nThe program then moves along each row of the rect area from left to right and\ntop to bottom by 1 unit, creating a new point and checking to see if the point\ncollides with the rect. If the point collides, a 1 is printed, and if the\npoint doesn't collide, a 0 is printed.\"\"\"\n\n# import\nimport pygame\n\n# main\ny = 4\nr = pygame.Rect(0,0,y,y)\np = [0,0]\npList = []\nwhile p != [0,y+1]:\n\tfor n in range(0,y+1):\n\t\tp[0] = n\n\t\tif r.collidepoint(p):\n\t\t\tpList.append(1)\n\t\telse:\n\t\t\tpList.append(0)\n\n\tprint '%d %d %d %d %d' % (pList[0],pList[1],pList[2],pList[3],pList[4])\n\t\n\tpList = []\n\tp[0] = 0\n\tp[1] += 1\n\n# wait for user to manually exit program\ninput('press enter to exit')\n\n\"\"\"Here is the output:\"\"\"\n1 1 1 1 0\n1 1 1 1 0\n1 1 1 1 0\n1 1 1 1 0\n0 0 0 0 0\npress enter to exit\n\n\"\"\"Even if you were to directly reference the topright, bottomleft, or bottomright\npoint of the rect as the argument to the collidepoint function, the rect still \nwould not detect a collision. The rect does, however, detect collision with its\ntopleft point:\"\"\"\n\n&gt;&gt;&gt;r.collidepoint(r.bottomleft)\n0\n&gt;&gt;&gt;r.collidepoint(r.topright)\n0\n&gt;&gt;&gt;r.collidepoint(r.bottomright)\n0\n&gt;&gt;&gt;r.collidepoint(r.topleft)\n1", "user_title": "Tim Winter", "datetimeon": "2008-01-16T15:33:48", "link": "Rect.collidepoint", "id": 1420}, {"content": "To use the scrollwheel:\nfor event in pygame.event.get():\n  if event.type == MOUSEBUTTONDOWN:\n    if event.button == 4:\n      #Zoom Out\n    elif event.button == 5:\n      #Zoom In", "user_title": "Ian Mallett", "datetimeon": "2008-01-25T15:59:11", "link": "pygame.mouse", "id": 1442}, {"content": "Use the following class to generate a bezier curve that can be drawn with aalines:\n\n## Class begins here\nclass Bezier:\n\n\tclass SmoothnessError(Exception): pass\n\tclass CurveError(Exception): pass\n\n\tdef __init__(self):\n\t\t\"\"\"\n\t\tA Python class for generating bezier curves\n\t\t\n\t\tAn implementation of an algorithm presented by Nils Pipenbrinck\n\t\thttp://www.cubic.org/docs/bezier.htm\n\t\t\"\"\"\n\t\n\tdef __lerp(self, ptA, ptB, t):\n\t\t\"\"\"\n\t\tReturns the linear interp between two points as a list\n\t\tptA and ptB are a list of xy coords, t is the point on the curve\n\t\t\"\"\"\n\t\tdest = []\n\t\tdest.append(ptA[0]+float(ptB[0]-ptA[0])*t)\n\t\tdest.append(ptA[1]+float(ptB[1]-ptA[1])*t)\n\t\treturn dest\n\t\n\tdef bezierPt(self, ctrlPts, t):\n\t\t\"\"\"A recursive function for finding point t along a bezier curve\"\"\"\n\t\tif len(ctrlPts) == 1:\n\t\t\t#print \"Len is 1\", ctrlPts\n\t\t\treturn ctrlPts[0]\n\t\tlerpList = []\n\t\tfor i in xrange(len(ctrlPts)-1):\n\t\t\tptA = [ctrlPts[i][0],ctrlPts[i][1]]\n\t\t\tptB = [ctrlPts[i+1][0],ctrlPts[i+1][1]]\n\t\t\tlerpList.append(self.__lerp(ptA,ptB,t))\n\t\t#print len(lerpList)\n\t\treturn self.bezierPt(lerpList, t)\n\t\n\tdef makeBezier(self, ctrlPts, smoothness):\n\t\t\"\"\"\n\t\tReturns a list of points on a bezier curve\n\t\t\n\t\tctrlPts is a list of 2d Points that define the curve, in most cases these\n\t\tconsist of control point locations and their handles, except in a 3 point\n\t\tcurve where it's just defined by the three control points.\n\t\t\n\t\tsmoothness is the number of points on the curve that should be generated.\n\t\tThis should always be more than two points or generating the bezier curve is\n\t\tpointless and the script dies in a fire (or throws an exception)\n\t\t\"\"\"\n\t\t\n\t\tif len(ctrlPts) &lt; 2:\n\t\t\traise self.CurverError(\"Curve list must contain more than one point\")\n\t\tif smoothness &lt; 3:\n\t\t\traise self.SmoothnessError(\"Smoothness must be more than two\")\n\t\titeration = smoothness\n\t\tbezierList = []\n\t\tsubtract=1.0/smoothness\n\t\tfor i in xrange(0,iteration):\n\t\t\tt = 1.0-(subtract*i)\n\t\t\tif t &lt; subtract:\n\t\t\t\tt = 0\n\t\t\tbPt = self.bezierPt(ctrlPts,t)\n\t\t\t#print bPt\n\t\t\tbezierList.append(bPt)\n\t\treturn bezierLis\n## Class ends\n\n###################\n# An example of how to use the class with pygame\n\n\n## Pygame Example\nimport math, pygame\nfrom pygame.locals import *\nimport bezier\n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((640,480))\n    clock = pygame.time.Clock()\n    \n    b = bezier.Bezier()\n    \"\"\"\n\tA bezier curve definition, a list of 2d poins, simple innit\n\tIt's basically control points with control handle locations before or\n\tafter the control point.\n\t\n    Read http://www.cubic.org/docs/bezier.htm for more info\n    \"\"\"\n    bezierPts = [[40,100],[80,20],[150,180],[260,100]]\n    bLine = b.makeBezier(bezierPts, 10)\n    screen.fill((255,255,255))\n    pygame.draw.aalines(screen, (1,1,1), False, bLine, 1)\n    pygame.display.flip()\n    bounce = False\n    \n    while True:\n        clock.tick(60)\n        pygame.event.pump()\n        event = pygame.event.poll()\n        if event.type == QUIT:\n            return\n        if event.type == KEYDOWN:\n            if event.key == K_ESCAPE:\n                return\n        setTo = pygame.time.get_ticks()/20\n        bezierPts[1][1] = setTo\n        bLine = b.makeBezier(bezierPts,20)\n        screen.fill((255,255,255))\n        pygame.draw.aalines(screen, (1,1,1), False, bLine, 1)\n        pygame.display.flip()\n\nif __name__ == \"__main__\":\n    m = main()\n## End example", "user_title": "Jeiel Aranal", "datetimeon": "2008-02-06T10:50:10", "link": "pygame.draw.aalines", "id": 1502}, {"content": "Play can return None. So be sure to check the channel before using it. Something like this...\n\n        channel = self.bounce_sound.play()\n        if channel is not None:\n            channel.set_volume(1.0 - stereo, stereo)", "user_title": "Will McGugan", "datetimeon": "2007-06-14T12:13:28", "link": "Sound.play", "id": 635}, {"content": "Should have an optional option \nfor sound playback speed...", "user_title": "Ian Mallett", "datetimeon": "2007-06-30T19:41:18", "link": "Sound.play", "id": 676}, {"content": "When antialias is enabled, rendering it on a black background makes it look bold.", "user_title": "Ian Mallett", "datetimeon": "2007-07-03T01:18:12", "link": "Font.render", "id": 689}, {"content": "Should have an Anti-alias option...", "user_title": "Ian Mallett", "datetimeon": "2008-02-25T23:09:09", "link": "pygame.draw.circle", "id": 1646}, {"content": "mods = pygame.key.get_mods()\nif mods &amp; KMOD_LSHIFT: #use whatever KMOD_ constant you want;)\n       print \"left shift pressed\"", "user_title": "Isaiah Heyer", "datetimeon": "2008-03-29T16:22:04", "link": "pygame.key.get_mods", "id": 1716}, {"content": "I would like to have a method of telling which side of a rect a point collides.  \nIn other words, which side is the point closest to?", "user_title": "Ian Mallett", "datetimeon": "2008-03-29T23:08:21", "link": "Rect.collidepoint", "id": 1718}, {"content": "Right.  Unfortunately, That's the way it is.  A width or height of 0 should also\nbe allowed, for rectangles of changing sizes (think progressbar at 0%)", "user_title": "Ian Mallett", "datetimeon": "2007-08-01T17:48:16", "link": "pygame.draw.rect", "id": 785}, {"content": "Instead of drawing a circle with zero radius, you can use the method set_at on the surface to set the color of a single pixel: http://www.pygame.org/docs/ref/surface.html#Surface.set_at", "user_title": "Victor Blomqvist", "datetimeon": "2007-09-23T08:07:45", "link": "pygame.draw.circle", "id": 873}, {"content": "'dummy' driver is missing ;-)", "user_title": "DR0ID", "datetimeon": "2007-09-23T12:08:05", "link": "pygame.display.init", "id": 875}, {"content": "please able my display mode with opengl acceleration", "user_title": "aaron pedralvez", "datetimeon": "2007-09-27T02:05:16", "link": "pygame.display.init", "id": 882}, {"content": "In the event MOUSEBUTTONDOWN, if you're using a mouse with a rotating wheel,\nevent.button returns 4 when it is rotated forward (counterclockwise) and 5 when\nit is rotating backward (clockwise). I used a print statement to discover this.", "user_title": "Andy Hanson", "datetimeon": "2007-10-02T20:43:15", "link": "pygame.event", "id": 900}, {"content": "In the event MOUSEBUTTONDOWN, if you're using a mouse with a rotating wheel,\nevent.button returns 4 when it is rotated forward (counterclockwise) and 5 when\nit is rotating backward (clockwise). I used a print statement to discover this.", "user_title": "Andy Hanson", "datetimeon": "2007-10-02T20:43:21", "link": "pygame.event", "id": 901}, {"content": "You can request fullscreen, but there doesn't seem to be a way to\ndetermine whether it's on. Meaning, there ought to be a 'get_mode()'.", "user_title": "Andy Sommerville", "datetimeon": "2007-12-04T14:43:28", "link": "pygame.display.set_mode", "id": 1206}, {"content": "http://www.pygame.org/docs/ref/sndarray.html#pygame.sndarray.make_sound\ncan be used to synthesize a sound object from sound samples.", "user_title": "Ian Mallett", "datetimeon": "2008-05-26T20:16:58", "link": "pygame.mixer.Sound", "id": 1953}, {"content": "The movie module in Pygame 1.8 works on Windows.\nThe statement that it doesn't work is out-of-date.", "user_title": "Jason M. Marshall", "datetimeon": "2008-05-21T14:15:44", "link": "pygame.movie", "id": 1917}, {"content": "return bezierLis -&gt; return bezierList (line 65)", "user_title": "Jordan Trudgett", "datetimeon": "2008-06-18T02:46:43", "link": "pygame.draw.aalines", "id": 2060}, {"content": "pygame.mixer.get_num_channels(): return count", "user_title": "Jordan Trudgett", "datetimeon": "2008-07-10T13:15:18", "link": "pygame.mixer.get_num_channels", "id": 2150}, {"content": "Calling Surface.lock() before many calls to Surface.set_at() and Surface.unlock() after is a great and easy optimization.", "user_title": "Ian Mallett", "datetimeon": "2008-07-11T23:25:11", "link": "Surface.set_at", "id": 2156}, {"content": "Just set the delay to something really big.", "user_title": "Ian Mallett", "datetimeon": "2008-08-19T06:01:04", "link": "pygame.key.set_repeat", "id": 2265}, {"content": "Is this thread-safe? Can I safely post messages from a different thread\nfrom the one that's processing events and rendering?", "user_title": "Weeble", "datetimeon": "2008-11-28T19:09:39", "link": "pygame.event.post", "id": 2339}, {"content": "''' Change alpha for surfaces with per-pixel alpha; only for small surfaces '''\ndef change_alpha(surface,alpha=0.5):\n\tsize = surface.get_size()\n\ttry:\n\t\tfor y in xrange(size[1]):\n\t\t\tfor x in xrange(size[0]):\n\t\t\t\tr,g,b,a = surface.get_at((x,y))\n\t\t\t\tsurface.set_at((x,y),(r,g,b,int(a*alpha)))\n\texcept:\n\t\treturn surface\n\treturn surface", "user_title": "Josef Vanzura", "datetimeon": "2010-11-19T09:47:18", "link": "Surface.set_alpha", "id": 3245}, {"content": "You can also do it with surfarray (faster).", "user_title": "Josef Vanzura", "datetimeon": "2010-11-19T09:49:02", "link": "Surface.set_alpha", "id": 3246}, {"content": "Sorry. I didn't read the previous comment, which is a better way.", "user_title": "Josef Vanzura", "datetimeon": "2010-11-19T09:56:18", "link": "Surface.set_alpha", "id": 3247}, {"content": "present in pygame 1.9.1 but not in pygame 1.8.1, which is currently the last binary release on Linux.", "user_title": "Shanti Pothapragada", "datetimeon": "2010-11-22T17:04:34", "link": "Rect.copy", "id": 3249}, {"content": "Also includes the attributes: x, y.", "user_title": "Sam Bull", "datetimeon": "2010-10-26T07:40:18", "link": "pygame.Rect", "id": 3225}, {"content": "Works like a charm. Thanks whoever you are.", "user_title": "Bartosz Debski", "datetimeon": "2010-09-29T19:26:57", "link": "Surface.fill", "id": 3211}, {"content": "The code snippet works perfectly; thanks!\nI think the documentation is sorely in need of an update.\nWishlist: other video formats, like .avi?", "user_title": "Ian Mallett", "datetimeon": "2009-01-01T16:05:17", "link": "pygame.movie", "id": 2360}, {"content": "An example to use this:\nscreen = pygame.display.set_mode(SCREENRECT.size) # SCREENRECT is a rect variable...\n            # ...with screen dimension\n\ndoggie = pygame.sprite.RenderUpdates() #We create the group\nDog.containers = doggie \n# class Dog: Needs 'pygame.sprite.Sprite.__init__(self,self.containers)'\n# inside def __init__(self, ...):\n\ndog1 = Dog(...) #Class Dog\ndog2 = Dog(...)\n...\ndogN = Dog(...)\n\n... #Some move actions and things\n\n#Now, time to re-paint them all\ndoggie.clear(screen, Background)\nchanges = doggie.draw(screen)\npygame.display.update(changes)\n#Now we have all dogs updated in screen\n\n#---------\nEasy, quick and effortless", "user_title": "Patata", "datetimeon": "2009-01-07T12:38:26", "link": "pygame.sprite.RenderUpdates", "id": 2366}, {"content": "# A better loading script:\n\nimport os, pygame\n\ndef load_image(file_name, colorkey=False, image_directory='images'):\n    'Loads an image, file_name, from image_directory, for use in pygame'\n    file = os.path.join(image_directory, file_name)\n    _image = pygame.image.load(file)\n    if colorkey:\n        if colorkey == -1: \n        # If the color key is -1, set it to color of upper left corner\n            colorkey = _image.get_at((0, 0))\n        _image.set_colorkey(colorkey)\n        _image = _image.convert()\n    else: # If there is no colorkey, preserve the image's alpha per pixel.\n        _image = _image.convert_alpha()\n    return _image", "user_title": "Nekody Lenkner", "datetimeon": "2009-03-20T21:58:08", "link": "pygame.image.load", "id": 2399}, {"content": "what does it mean by font name? can it be a path to a font?", "user_title": "Mad Cloud Games", "datetimeon": "2010-07-02T01:21:30", "link": "pygame.font.SysFont", "id": 3151}, {"content": "You can use multiple screens, but you'll need to make a separate process for each.", "user_title": "Ian Mallett", "datetimeon": "2009-08-01T23:26:07", "link": "pygame.display.set_mode", "id": 2900}, {"content": "VIDEORESIZE      size, w, h\nsize == (w, h) # same data, different access", "user_title": "DR0ID", "datetimeon": "2009-04-04T12:27:05", "link": "pygame.event", "id": 2411}, {"content": "je ne sais pas pourquoi, mais; si vous utiliser une surface pour effacer le display au lieu d'utiliser un 'fill',\nil sera beaucoup plus rapide de blitter une copie du display :\n\ndisplay = pygame.display.set_mode((500,500))\nbackground = pygame.image.load('blablabla...')\ndisplay.blit(background,(0,0))\nbackground = display.copy()  ----&gt; utiliser cette copie pour multi-blitter plus rapidement une image de fond.", "user_title": "josmiley", "datetimeon": "2009-08-03T01:50:34", "link": "Surface.copy", "id": 2902}, {"content": "This doesn't say anything about the type attribute.\nYou can compare it to MOUSEBUTTONUP, KEYDOWN, etc to find out what the events\ntype is.", "user_title": "Daniel Westbrook", "datetimeon": "2009-07-29T00:20:38", "link": "pygame.event.Event", "id": 2896}, {"content": "is it a Rect object???", "user_title": "Alex", "datetimeon": "2010-05-04T17:47:38", "link": "pygame.display.update", "id": 3117}, {"content": "TIP:\nIf sound has noise/noisy is choppy or has static, the solution:\n\npygame.mixer.quit() #Make sure you all this before .init()\npygame.mixer.init()", "user_title": "Chris Goldie", "datetimeon": "2009-08-11T05:44:03", "link": "Sound.play", "id": 2911}, {"content": "The convert_alpha function prepares a surface for usage with per-pixel alphas.  That is, for example, if you have a PNG or TGA image with an alpha channel controlling opacity of individual pixels, you would want to use this function on your surface after loading the image to speed up the blitting process.", "user_title": "Brad Smithee", "datetimeon": "2010-04-29T02:55:18", "link": "Surface.convert_alpha", "id": 3113}, {"content": "This will be extremely useful!", "user_title": "Ian Mallett", "datetimeon": "2009-08-15T19:21:45", "link": "pygame.transform.average_surfaces", "id": 2917}, {"content": "Some basic sample code for (approximately) constraining a bunch of text to a given width:\n\nwordsToWrite = toWrite.rstrip().split(\" \") #Get rid of the newline char and split on spaces\ncurrLine = \"\"\nnumLines = 0\nmaxWidthFound = 0\nfor word in wordsToWrite:\n    currLine = currLine + \" \" + word #Add the next word to the line\n\n    if ((textFont.size(currLine))[0] &gt; maxAllowedWidth): #Check if the width of the line exceeds the set limit\n\n        if (textFont.size(currLine))[0] &gt; maxWidthFound: #Get the maximum line width found\n            maxWidthFound = (textFont.size(currLine))[0]\n\n        lines.append (textFont.render(currLine, 1, color, bgcolor)) #Add the rendered line to a list\n        currLine = \"\"\n        numLines = numLines + 1\n\nif currLine != \"\": #Once we exit the loop, we will probably still have a line to be rendered\n    lines.append (textFont.render(currLine, 1, color, bgcolor))\n    currLine = \"\"\n    numLines = numLines + 1\n\nself.image = pygame.Surface((maxWidthFound + 20, numLines * textFont.get_height() + 20)) #Create a surface of the appropriate size\n\nfor lineNum in range(numLines): \n    self.image.blit(lines[lineNum], (10,lineNum * textFont.get_height() + 10))", "user_title": "Aditya Keswani", "datetimeon": "2009-07-20T07:29:06", "link": "Font.render", "id": 2887}, {"content": "For all of these drawing functions, the coordinates are relative to the surface\nyou are drawing to. i.e. if you are drawing to a surface somewhere in the middle of\nthe screen, and you draw a circle at (0,0), its center will be the top-left corner\nof the surface being drawn to, not the top-left corner of the screen", "user_title": "Aditya Keswani", "datetimeon": "2009-07-20T07:23:36", "link": "pygame.draw", "id": 2886}, {"content": "The messages here:\nhttp://www.mail-archive.com/pygame-users@seul.org/msg10616.html\n\nimply that GL_SWAP_CONTROL can also be passed to gl_set_attribute to control whether\ndisplay swaps honor vsync.", "user_title": "Jonathan Hartley", "datetimeon": "2010-03-25T15:42:06", "link": "pygame.display.gl_set_attribute", "id": 3087}, {"content": "Pygame THECOLORS as HTML\nhttps://sites.google.com/site/meticulosslacker/pygame-thecolors", "user_title": "Meticulos Slacker", "datetimeon": "2010-03-18T03:10:26", "link": "pygame.Color", "id": 3078}, {"content": "Should be \"buffer\", not \"buffersize\"", "user_title": "Ian Mallett", "datetimeon": "2010-03-19T00:36:48", "link": "pygame.mixer.pre_init", "id": 3079}, {"content": "Put this first:\nfor e in pygame.event.get()", "user_title": "Ian Mallett", "datetimeon": "2010-03-20T19:51:20", "link": "pygame.key.set_repeat", "id": 3080}, {"content": "mod is the bitfield of KMOD_* constants:\npygame.KMOD_NONE\t0\npygame.KMOD_LSHIFT\t1\npygame.KMOD_RSHIFT\t2\npygame.KMOD_SHIFT\t3\npygame.KMOD_LCTRL\t64\npygame.KMOD_RCTRL\t128\npygame.KMOD_CTRL\t192\npygame.KMOD_LALT\t256\npygame.KMOD_RALT\t512\npygame.KMOD_ALT\t\t768\npygame.KMOD_LMETA\t1024\npygame.KMOD_RMETA\t2048\npygame.KMOD_META\t3072\npygame.KMOD_NUM\t\t4096\npygame.KMOD_CAPS\t8192\npygame.KMOD_MODE\t16384", "user_title": "Vladar", "datetimeon": "2010-03-23T06:16:44", "link": "pygame.event", "id": 3081}, {"content": "If you try to use fadeout, the queued sound will begin, as opposed to stop and pause.", "user_title": "Andy Hanson", "datetimeon": "2009-07-12T22:43:31", "link": "Channel.queue", "id": 2875}, {"content": "I ran into that problem -- the solution is to initialize pygame first :)\n\nimport pygame\npygame.init()\nprint pygame.key.name(pygame.K_UP)", "user_title": "Jared", "datetimeon": "2009-08-29T04:11:27", "link": "pygame.key.name", "id": 2928}, {"content": "It appears that when the delay is set to zero, \nkey.set_repeat is returned to the default, disabled state.\nTo set it to a minimum, essentially no delay, just set it to 1.\n\npygame.key.set_repeat(0,50) #Doesn't work.\npygame.key.set_repeat(1,50) #Works with essentially no delay.", "user_title": "David Khono Hackland", "datetimeon": "2010-03-02T22:20:03", "link": "pygame.key.set_repeat", "id": 3065}, {"content": "It appears that when the delay is set to zero, \nkey.set_repeat is returned to the default, disabled state.\nTo set it to a minimum, essentially no delay, just set it to 1.\n\npygame.key.set_repeat(0,50) #Doesn't work.\npygame.key.set_repeat(1,50) #Works with essentially no delay.", "user_title": "David Khono Hackland", "datetimeon": "2010-03-02T22:19:26", "link": "pygame.key.set_repeat", "id": 3064}, {"content": "Does it matter if you tick at the start or at the end?", "user_title": "Mitchell K", "datetimeon": "2009-09-12T21:09:15", "link": "Clock.tick", "id": 2944}, {"content": "The example's .flip(..) below won't work - maybe I should have checked it before posting...\nHere is a better Version, it should work now.\n\nfrom pygame import Rect, Surface\nclass Sprites():\n    def __init__(self, spritesheet, size):\n        self.sheet = spritesheet\n        self.sheet.convert_alpha()\n        self.size = size\n        \n        self.sprites = []\n        for x in xrange(spritesheet.get_width() / size[0]):\n            list = []\n            for y in xrange(spritesheet.get_height() / size[1]):\n                list.append(spritesheet.subsurface(Rect((x*size[0], y*size[1]) , size)))\n            self.sprites.append(list)\n    def flip(self, xbool, ybool):\n        new = Surface(self.sheet.get_size())\n        new.fill((0, 0, 0, 0))\n        for row in self.sprites:\n            for sprite in row:\n                new.blit(flip(sprite, xbool, ybool), sprite.get_offset())\n        self.sheet.fill((0, 0, 0, 0))\n        self.sheet.blit(new, (0, 0))\n    def __getitem__(self, x=None, y=None):\n        # not very tested, .flip(y=7) won't work\n        # the if conditions should allow you to access a sheet with one row/col more easily .flip(5, 0) == .flip(5)\n        if x is not None:\n            if y is None:\n                if len(self.sprites) &gt; x:\n                    y = 0\n                else:\n                    y = x\n                    x = 0\n        elif y is None:\n            raise IndexError\n                \n        return self.sprites[x][y]\n\n@any Developer/Moderator - it would be nice if my wrong post, \"The example below won't work\" and this Notice would be removed.", "user_title": "Rolf Sievers", "datetimeon": "2009-11-06T11:31:59", "link": "Surface.subsurface", "id": 2998}, {"content": "Here is a simple Sprite-sheet Class I wrote for an application, maybe someone can use it.\n\nfrom pygame import Rect\nclass Sprites():\n    def __init__(self, spritesheet, size):\n        self.sheet = spritesheet\n        self.sheet.convert_alpha()\n        self.size = size\n        \n        self.sprites = []\n        for x in xrange(spritesheet.get_width() / size[0]):\n            list = []\n            for y in xrange(spritesheet.get_height() / size[1]):\n                list.append(spritesheet.subsurface(Rect((x*size[0], y*size[1]) , size)))\n            self.sprites.append(list)\n            print list\n        print self.sprites\n    def flip(self, xbool, ybool):\n        self.sheet.fill((0, 0, 0, 0))\n        for row in self.sprites:\n            for sprite in row:\n                sprite.blit(flip(sprite, xbool, ybool), (0, 0))\n    def __getitem__(self, x=None, y=None):\n        if x is not None:\n            if y is None:\n                if len(self.sprites) &gt; x:\n                    y = 0\n                else:\n                    y = x\n                    x = 0\n        elif y is None:\n            raise IndexError\n                \n        return self.sprites[x][y]", "user_title": "Rolf Sievers", "datetimeon": "2009-11-06T11:14:23", "link": "Surface.subsurface", "id": 2997}, {"content": "Is there anyway to get the rect of a polygon without having to create a surface greater than or equal to the polygon, and then gather the rect from the polygon?", "user_title": "Luke Endres", "datetimeon": "2009-08-08T21:50:46", "link": "pygame.draw.polygon", "id": 2907}, {"content": "This is twice the work because the image is rotated and then resized (subrect\nis copied) but it doesn't hurt my math-addled brain.\n\ndef rot_center(image, angle):\n    \"\"\"rotate an image while keeping its center and size\"\"\"\n    orig_rect = image.get_rect()\n    rot_image = pygame.transform.rotate(image, angle)\n    rot_rect = orig_rect.copy()\n    rot_rect.center = rot_image.get_rect().center\n    rot_image = rot_image.subsurface(rot_rect).copy()\n    return rot_image", "user_title": "Gummbum", "datetimeon": "2010-01-17T01:17:23", "link": "pygame.transform.rotate", "id": 3034}, {"content": "Use pygame.transform.rotate(Surface, angle)", "user_title": "Francesco Pasa", "datetimeon": "2010-01-17T09:30:05", "link": "pygame.Surface", "id": 3035}, {"content": "Does the returned Boolean value indicate success/failure at toggling fullscreen mode,\nor current status of the display (e.g., fullscreen = True, windowed = False)?", "user_title": "Chris L", "datetimeon": "2010-01-27T16:33:12", "link": "pygame.display.toggle_fullscreen", "id": 3041}, {"content": "set_blocked() clear queue from ALL events", "user_title": "ploutos", "datetimeon": "2009-10-23T11:07:21", "link": "pygame.event.set_blocked", "id": 2980}, {"content": "If they play in a CD player, they were burned properly.", "user_title": "Jeffrey Aylesworth", "datetimeon": "2009-10-21T19:51:47", "link": "pygame.cdrom", "id": 2975}, {"content": "This is very important for mac because it shows the icon in the dock.. when I use this, it flashes the snake image for a second before changing, and it also gets smaller then the application icon which is the same (using py2app).", "user_title": "Mitchell K", "datetimeon": "2009-09-24T16:05:59", "link": "pygame.display.set_icon", "id": 2959}, {"content": "\"\"\"\n\t # This is a get_ticks() function simple example\n\t # This script should return 10 as a result\n\"\"\"\n# Standard library imports\nimport time\n# Related third party imports\nimport pygame\n#Pygame start function\n\npygame.init()\n# Create the clock\nclock = pygame.time.Clock()\n# A simple loop of 10 stages\nfor i in range(10):\n\t# Update the clock\n\tclock.tick(1)\n# Print the seconds\nprint int(round(pygame.time.get_ticks()/1000))", "user_title": "Sergio Milardovich", "datetimeon": "2010-06-08T15:33:04", "link": "pygame.time.get_ticks", "id": 3138}, {"content": "Note that pygame.scrap seems to be unimplemented in pygame-1.9.1.win32-py3.1.msi\n\nDefine testscrap.py, like this:\n\nimport pygame\npygame.init()\npygame.scrap.init()\n\n\nRun it, like this:\n\nC:\\Users\\Dave\\Documents\\Python&gt;testscrap.py\nC:\\Users\\Dave\\Documents\\Python\\testscrap.py:3: RuntimeWarning: use scrap: No module named scrap\n(ImportError: No module named scrap)\n  pygame.scrap.init()\nTraceback (most recent call last):\n  File \"C:\\Users\\Dave\\Documents\\Python\\testscrap.py\", line 3, in \n    pygame.scrap.init()\n  File \"C:\\Python31\\lib\\site-packages\\pygame\\__init__.py\", line 70, in __getattr__\n    raise NotImplementedError(MissingPygameModule)\nNotImplementedError: scrap module not available\n(ImportError: No module named scrap)", "user_title": "Dave Burton", "datetimeon": "2011-01-16T00:15:21", "link": "pygame.scrap", "id": 3731}, {"content": "BTW, the same error occurs if you have initialized a display surface, too:\n\nimport pygame\npygame.init()\nscreen=pygame.display.set_mode((640,360),0,32)\npygame.scrap.init()", "user_title": "Dave Burton", "datetimeon": "2011-01-16T00:18:19", "link": "pygame.scrap", "id": 3732}, {"content": "Hey, July 7 2009 Anonymous, that's a nice demo!\n\nFor Python 3 compatibility, just change the last line to:\n\n  pygame.time.delay(1000//50)", "user_title": "Dave Burton", "datetimeon": "2011-01-24T10:00:06", "link": "Surface.subsurface", "id": 3746}, {"content": "Note that the order of the tuple members in virtual attributes like .topleft\nis always (x,y) [or (left,top) or (width,height)] even if the name of the\nvirtual attribute seems to suggest the opposite order.  E.g.,\nrect1.topleft == (rect1.left,rect1.top)", "user_title": "Dave Burton", "datetimeon": "2011-01-25T01:19:14", "link": "pygame.Rect", "id": 3747}, {"content": "There's no 'code' member for type USEREVENT, unless you create one yourself\nwhen you create the event.", "user_title": "Dave Burton", "datetimeon": "2011-01-25T21:33:33", "link": "pygame.event", "id": 3750}, {"content": "July 15 2010 Anonymous, here's your example of a resizeable pygame window.\n\nI don't know what you mean by \"window itself as well as the display.\"\nIf you want to resize something WITHIN the pygame window, just blit something\ndifferent onto it.\n\nDave\n\n\nimport sys, os, pygame\npygame.init()\n\nclock = pygame.time.Clock()\n\nscrsize = width,height = 600,400\nblack = 0,0,0\nbgcolor = (240,240,220)  # light grey\n\n# to get the true full-screen size, do this BEFORE pygame.display.set_mode:\nfullscreen_sz = pygame.display.Info().current_w, pygame.display.Info().current_h\nprint( 'screen size =', fullscreen_sz )\n\n\n# ---------- This works under Windows Vista, no promises elsewhere! ----------\n# initially center the pygame window by setting %SDL_VIDEO_WINDOW_POS%\nwin_pos_left = 1 + ((fullscreen_sz[0] - width) // 2)\nwin_pos_top = 1 + ((fullscreen_sz[1] - height) // 2)\nos.environ['SDL_VIDEO_WINDOW_POS'] = '{0},{1}'.format(win_pos_left, win_pos_top)\n# ----------------------------------------------------------------------------\n\nscreen = pygame.display.set_mode(scrsize, pygame.RESIZABLE)\n\n# ----------------------------------------------------------------------------\nos.environ['SDL_VIDEO_WINDOW_POS'] = ''\n# if you don't clear the environment variable, the window will reposition\n# every time pygame.display.set_mode() gets called due to a VIDEORESIZE event.\n# ----------------------------------------------------------------------------\n\narial = pygame.font.SysFont( 'arial,microsoftsansserif,courier', 14 )\ntxt2display = arial.render( \"This window is resizeable\", True, black )\ntxt2display_w = txt2display.get_size()[0]\n\nwhile True:\n    changed = False\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit(0)\n        elif event.type == pygame.VIDEORESIZE:\n            scrsize = event.size  # or event.w, event.h\n            screen = pygame.display.set_mode(scrsize,RESIZABLE)\n            changed = True\n\n    screen.fill( bgcolor )\n    screen.blit( txt2display, ((scrsize[0]+1-txt2display_w)//2,1) )  # at top-center of screen\n    pygame.display.update()\n    if not changed:\n        clock.tick(60) # limit to 60 fps", "user_title": "Dave Burton", "datetimeon": "2011-01-25T23:10:35", "link": "pygame.display.init", "id": 3751}, {"content": "Oops!  Tiny correction... the 8th-to-last line should be\n\n            screen = pygame.display.set_mode(scrsize,pygame.RESIZABLE)\n\n(Or else you can \"from pygame.locals import *\")", "user_title": "Dave Burton", "datetimeon": "2011-01-25T23:16:00", "link": "pygame.display.init", "id": 3752}, {"content": "from pygame.locals import *\n\n_evnames = {}                                 # from SDL-1.2.14\\include\\SDL_events.h\n_evnames[NOEVENT]         = 'NOEVENT'          #  0  SDL_NOEVENT\n_evnames[ACTIVEEVENT]     = 'ACTIVEEVENT'      #  1  SDL_ACTIVEEVENT\n_evnames[KEYDOWN]         = 'KEYDOWN'          #  2  SDL_KEYDOWN\n_evnames[KEYUP]           = 'KEYUP'            #  3  SDL_KEYUP\n_evnames[MOUSEMOTION]     = 'MOUSEMOTION'      #  4  SDL_MOUSEMOTION\n_evnames[MOUSEBUTTONDOWN] = 'MOUSEBUTTONDOWN'  #  5  SDL_MOUSEBUTTONDOWN\n_evnames[MOUSEBUTTONUP]   = 'MOUSEBUTTONUP'    #  6  SDL_MOUSEBUTTONUP\n_evnames[JOYAXISMOTION]   = 'JOYAXISMOTION'    #  7  SDL_JOYAXISMOTION\n_evnames[JOYBALLMOTION]   = 'JOYBALLMOTION'    #  8  SDL_JOYBALLMOTION\n_evnames[JOYHATMOTION]    = 'JOYHATMOTION'     #  9  SDL_JOYHATMOTION\n_evnames[JOYBUTTONDOWN]   = 'JOYBUTTONDOWN'    # 10  SDL_JOYBUTTONDOWN\n_evnames[JOYBUTTONUP]     = 'JOYBUTTONUP'      # 11  SDL_JOYBUTTONUP\n_evnames[QUIT]            = 'QUIT'             # 12  SDL_QUIT\n_evnames[SYSWMEVENT]      = 'SYSWMEVENT'       # 13  SDL_SYSWMEVENT\n                                               # 14  SDL_EVENT_RESERVEDA\n                                               # 15  SDL_EVENT_RESERVEDB\n_evnames[VIDEORESIZE]     = 'VIDEORESIZE'      # 16  SDL_VIDEORESIZE\n_evnames[VIDEOEXPOSE]     = 'VIDEOEXPOSE'      # 17  SDL_VIDEOEXPOSE\n                                               # 18  SDL_EVENT_RESERVED2\n                                               # 19  SDL_EVENT_RESERVED3\n                                               # 20  SDL_EVENT_RESERVED4\n                                               # 21  SDL_EVENT_RESERVED5\n                                               # 22  SDL_EVENT_RESERVED6\n                                               # 23  SDL_EVENT_RESERVED7\n_evnames[USEREVENT]       = 'USEREVENT'        # 24  SDL_USEREVENT\n_evnames[NUMEVENTS]       = 'NUMEVENTS'        # 32  SDL_NUMEVENTS\n\n\ndef event_name(evtype):\n    '''return a displayable name for a pygame/SDL event type number'''\n    try:\n        result = _evnames[evtype]\n    except:\n        if evtype in range(USEREVENT,NUMEVENTS):\n            result = 'USEREVENT+' + repr(evtype-USEREVENT)\n        elif evtype &gt;= NUMEVENTS:\n            result = 'ILLEGAL_EVENT_' + repr(evtype)\n        elif evtype == 14:\n            result = 'EVENT_RESERVEDA'\n        elif evtype == 15:\n            result = 'EVENT_RESERVEDB'\n        else:\n            result = 'EVENT_RESERVED' + repr(evtype-16)\n    return result\n\n\nfor i in range(0,33):\n    print(repr(i) + ' = ' + event_name(i))\n\n\n# It's all gonna change in SDL 1.3:\n#\n#   SDL_FIRSTEVENT        = 0      # Unused\n#\n#   SDL_QUIT              = 0x100  # User-requested quit\n#\n#   SDL_WINDOWEVENT       = 0x200  # Window state change\n#   SDL_SYSWMEVENT        = 0x201  # System specific event\n#\n#   # Keyboard events\n#   SDL_KEYDOWN           = 0x300  # Key pressed\n#   SDL_KEYUP             = 0x301  # Key released\n#   SDL_TEXTEDITING       = 0x302  # Keyboard text editing (composition)\n#   SDL_TEXTINPUT         = 0x303  # Keyboard text input\n#\n#   # Mouse events\n#   SDL_MOUSEMOTION       = 0x400  # Mouse moved\n#   SDL_MOUSEBUTTONDOWN   = 0x401  # Mouse button pressed\n#   SDL_MOUSEBUTTONUP     = 0x402  # Mouse button released\n#   SDL_MOUSEWHEEL        = 0x403  # Mouse wheel motion\n#\n#   # Tablet or multiple mice input device events\n#   SDL_INPUTMOTION       = 0x500  # Input moved\n#   SDL_INPUTBUTTONDOWN   = 0x501  # Input button pressed\n#   SDL_INPUTBUTTONUP     = 0x502  # Input button released\n#   SDL_INPUTWHEEL        = 0x503  # Input wheel motion\n#   SDL_INPUTPROXIMITYIN  = 0x504  # Input pen entered proximity\n#   SDL_INPUTPROXIMITYOUT = 0x505  # Input pen left proximity\n#\n#   # Joystick events\n#   SDL_JOYAXISMOTION     = 0x600  # Joystick axis motion\n#   SDL_JOYBALLMOTION     = 0x601  # Joystick trackball motion\n#   SDL_JOYHATMOTION      = 0x602  # Joystick hat position change\n#   SDL_JOYBUTTONDOWN     = 0x603  # Joystick button pressed\n#   SDL_JOYBUTTONUP       = 0x604  # Joystick button released\n#\n#   # Touch events\n#   SDL_FINGERDOWN        = 0x700\n#   SDL_FINGERUP          = 0x701\n#   SDL_FINGERMOTION      = 0x702\n#   SDL_TOUCHBUTTONDOWN   = 0x703\n#   SDL_TOUCHBUTTONUP     = 0x704\n#\n#   # Gesture events\n#   SDL_DOLLARGESTURE     = 0x800\n#   SDL_DOLLARRECORD      = 0x801\n#   SDL_MULTIGESTURE      = 0x802\n#\n#   # Clipboard events\n#   SDL_CLIPBOARDUPDATE   = 0x900  # The clipboard changed\n#\n#   # Obsolete events\n#   SDL_EVENT_COMPAT1     =0x7000  # SDL 1.2 events for compatibility\n#   SDL_EVENT_COMPAT2     =0x7001\n#   SDL_EVENT_COMPAT3     =0x7002\n#\n#   # SDL_USEREVENT thru SDL_LASTEVENT are for your use\n#   SDL_USEREVENT         =0x8000\n#   SDL_LASTEVENT         =0xFFFF", "user_title": "Dave Burton", "datetimeon": "2011-01-27T04:08:06", "link": "pygame.event.Event", "id": 3753}, {"content": "This function seems to me little bit buggy, so I wrote my own:\n\na and b are surfarrays of some surfaces that you want to compare\n\n    def comparray(self,a,b):\n        c = abs(a.__sub__(b))\n        c = c.__ge__(self.tolerance)*255\n        surface = pygame.surfarray.make_surface(c)\n        return surface", "user_title": "Kaan Ak\u00c3\u009fit", "datetimeon": "2011-01-27T18:49:33", "link": "PixelArray.compare", "id": 3756}, {"content": "There's an error in this documentation w/r/t the final (width) argument:\n\n    pygame.draw.rect(self.image, color, self.image.get_rect(), width=1)\nTypeError: rect() takes no keyword arguments\n\nLeave off the \"width=\" to make it work:\n\n    pygame.draw.rect(self.image, color, self.image.get_rect(), 1)\n\nThis is with either pygame-1.9.1.win32-py2.6.msi or pygame-1.9.1.win32-py3.1.msi", "user_title": "Dave Burton", "datetimeon": "2011-01-28T03:12:31", "link": "pygame.draw.rect", "id": 3757}, {"content": "There's an error in this documentation w/r/t the final (width) argument:\n\n    pygame.draw.line(self.image, (0,0,0), (x,y), (x,y+h), width=2)\nTypeError: line() takes no keyword arguments\n\nLeave off the \"width=\" to make it work:\n\n    pygame.draw.line(self.image, (0,0,0), (x,y), (x,y+h), 2)\n\nThis is with either pygame-1.9.1.win32-py2.6.msi or pygame-1.9.1.win32-py3.1.msi", "user_title": "Dave Burton", "datetimeon": "2011-01-28T04:54:01", "link": "pygame.draw.line", "id": 3759}, {"content": "Rect.center rounds UP:\n\nr0x0 = pygame.Rect(0,0,0,0)  # a 0x0 rect\nprint('center of 0x0 rect is ' + repr(r0x0.center))  # result is (0,0) = not in the rect!\nr1x1 = pygame.Rect(0,0,1,1)  # a 1x1 rect\nprint('center of 1x1 rect is ' + repr(r1x1.center))  # result is (0,0) = correct\nr2x2 = pygame.Rect(0,0,2,2)  # a 2x2 rect\nprint('center of 2x2 rect is ' + repr(r2x2.center))  # result is (1,1) = rounded up!\nr3x3 = pygame.Rect(0,0,3,3)  # a 3x3 rect\nprint('center of 3x3 rect is ' + repr(r3x3.center))  # result is (1,1) = exact\nr4x4 = pygame.Rect(0,0,4,4)  # a 4x4 rect\nprint('center of 4x4 rect is ' + repr(r4x4.center))  # result is (2,2) = rounded up!\nr5x5 = pygame.Rect(0,0,5,5)  # a 5x5 rect\nprint('center of 5x5 rect is ' + repr(r5x5.center))  # result is (2,2) = exact\nr6x6 = pygame.Rect(0,0,6,6)  # a 6x6 rect\nprint('center of 6x6 rect is ' + repr(r6x6.center))  # result is (3,3) = rounded up!\nr7x7 = pygame.Rect(0,0,7,7)  # a 7x7 rect\nprint('center of 7x7 rect is ' + repr(r7x7.center))  # result is (3,3) = exact", "user_title": "Dave Burton", "datetimeon": "2011-01-29T20:46:36", "link": "Rect.collidepoint", "id": 3761}, {"content": "(Oops, I added that comment in the wrong place.)", "user_title": "Dave Burton", "datetimeon": "2011-01-29T20:47:58", "link": "Rect.collidepoint", "id": 3762}, {"content": "Rect.center rounds UP:\n\nr0x0 = pygame.Rect(0,0,0,0)  # a 0x0 rect\nprint('center of 0x0 rect is ' + repr(r0x0.center))  # result is (0,0) = not in the rect!\nr1x1 = pygame.Rect(0,0,1,1)  # a 1x1 rect\nprint('center of 1x1 rect is ' + repr(r1x1.center))  # result is (0,0) = correct\nr2x2 = pygame.Rect(0,0,2,2)  # a 2x2 rect\nprint('center of 2x2 rect is ' + repr(r2x2.center))  # result is (1,1) = rounded up!\nr3x3 = pygame.Rect(0,0,3,3)  # a 3x3 rect\nprint('center of 3x3 rect is ' + repr(r3x3.center))  # result is (1,1) = exact\nr4x4 = pygame.Rect(0,0,4,4)  # a 4x4 rect\nprint('center of 4x4 rect is ' + repr(r4x4.center))  # result is (2,2) = rounded up!\nr5x5 = pygame.Rect(0,0,5,5)  # a 5x5 rect\nprint('center of 5x5 rect is ' + repr(r5x5.center))  # result is (2,2) = exact\nr6x6 = pygame.Rect(0,0,6,6)  # a 6x6 rect\nprint('center of 6x6 rect is ' + repr(r6x6.center))  # result is (3,3) = rounded up!\nr7x7 = pygame.Rect(0,0,7,7)  # a 7x7 rect\nprint('center of 7x7 rect is ' + repr(r7x7.center))  # result is (3,3) = exact", "user_title": "Dave Burton", "datetimeon": "2011-01-29T20:48:50", "link": "pygame.Rect", "id": 3763}, {"content": "This documentation is incorrect.  A point along the right or bottom edge IS\nwithin the Rect, and points at coordinates on the bottom or right edge DO\ncollide with the Rect.\n\nHere's proof:\n\nr = Rect(0,0, 4,4)  # a 4x4 rectangle\nprint('0,0: ' + repr(r.collidepoint(0,0)))\nprint('1,1: ' + repr(r.collidepoint(1,1)))\nprint('2,2: ' + repr(r.collidepoint(2,2)))\nprint('3,3: ' + repr(r.collidepoint(3,3)))\nprint('4,4: ' + repr(r.collidepoint(4,4)))\n\nWith pygame 1.9.1 under both Python 3.1 and 2.6, it prints:\n\n0,0: 1\n1,1: 1\n2,2: 1\n3,3: 1\n4,4: 0\n\nNote that the bottom-right pixel within the 4x4 rect is at (3,3) and\ncollidepoint((3,3)) does return 1 (meaning true).\n\nA second (minor) documentation error is that it actually returns an integer\n1 or 0 instead of boolean True or False.", "user_title": "Dave Burton", "datetimeon": "2011-01-29T22:35:18", "link": "Rect.collidepoint", "id": 3764}, {"content": "This class is a bit odd.  Event objects have no event.__dict__ attribute,\nand the dir(event) function doesn't work.  However, repr(event) returns a\nnice, thorough description of an event object and its attributes, and the\nevent.dict attribute lists all the important attributes except .type and\n.dict itself.", "user_title": "Dave Burton", "datetimeon": "2011-02-07T04:48:40", "link": "pygame.event", "id": 3774}, {"content": "With a Microsoft IntelliMouse p/n X05-77975, under Windows Vista,\nwith either Python 2.6 or 3.1, the button numbers are:\n1 = left button\n2 = center button/wheel press\n3 = right button\n4 = wheel roll forward/up\n5 = wheel roll backward/down\n6 = left side extra button\n7 = right side extra button", "user_title": "Dave Burton", "datetimeon": "2011-02-23T21:04:46", "link": "pygame.event", "id": 3794}, {"content": "There's a cursor missing!  sizer_xy_strings defines an upper-left-to-lower-right\nresizer cursor, suitable for dragging the upper-left or lower-right corner.\nBut there's no sizer_yx_strings to make the upper-right-to-lower-left cursor.\nHere's how I made one:\n\nsizer_yx_strings = [ x[12::-1]+x[13:] for x in pygame.cursors.sizer_xy_strings ]", "user_title": "Dave Burton", "datetimeon": "2011-02-24T02:08:27", "link": "pygame.cursors", "id": 3795}, {"content": "Or, equivalently:\n\nsizer_yx_strings = (               #sized 24x16\n \"     XXXXXXXX           \",\n \"      X.....X           \",\n \"       X....X           \",\n \"        X...X           \",\n \"       X.X..X           \",\n \"      X.X X.X           \",\n \"X    X.X   XX           \",\n \"XX  X.X     X           \",\n \"X.XX.X                  \",\n \"X...X                   \",\n \"X...X                   \",\n \"X....X                  \",\n \"X.....X                 \",\n \"XXXXXXXX                \",\n \"                        \",\n \"                        \",\n)", "user_title": "Dave Burton", "datetimeon": "2011-02-24T02:13:59", "link": "pygame.cursors", "id": 3796}, {"content": "The Sound function now accepts 'buffer', 'file', and 'array' keyword arguments\nto remove any ambiguity in how to treat an argument. The 'array' keyword is new,\nand tells Sound to look check the argument for an array struct interface or\nthe new buffer protocol if supported. This allows Sound to function like\nsndarray.make_sound.\n\nSound also exposes an array struct interface and the new buffer protocol.", "user_title": "Lenard Lindstrom", "datetimeon": "2011-03-01T13:26:33", "link": "pygame.mixer.Sound", "id": 3799}, {"content": "I'm not sure which version of Pygame is being used here, 1.9? At the time it was\nreleased NumPy was unavailable for Python 3.1. Python 1.9.2 alpha from SVN\ncertainly does support NumPy for Python 3.1, and 3.2.", "user_title": "Lenard Lindstrom", "datetimeon": "2011-03-01T13:35:12", "link": "pygame.surfarray", "id": 3800}, {"content": "That should be \"which version of Pygame is being used here, 1.9.1?\"", "user_title": "Lenard Lindstrom", "datetimeon": "2011-03-01T13:37:12", "link": "pygame.surfarray", "id": 3801}, {"content": "New to Pygame 1.9.2 for NumPy: pixels_red, pixels_green, and pixels_blue.", "user_title": "Lenard Lindstrom", "datetimeon": "2011-03-01T13:38:40", "link": "pygame.surfarray.pixels_alpha", "id": 3802}, {"content": "For the KEYDOWN and KEYUP event \"scancode\" is also a member and can be used \nfor the unknown keys", "user_title": "Daniel Kaminsky", "datetimeon": "2011-03-23T05:51:58", "link": "pygame.event", "id": 3872}, {"content": "The wheel generates pygame.MOUSEBUTTONUP events too, not just pygame.MOUSEBUTTONDOWN event.", "user_title": "Dan Ross", "datetimeon": "2011-04-02T23:30:45", "link": "pygame.mouse", "id": 3884}, {"content": "Forget what the functions do, check out Mr. Brown's naming style. Its pure genius!\n1) angle_times_WOW_pi_divided_by_180\n2) HE_HE_strange_popper_z\n3) buffy_the_fat2\n4) they_did_touch\n5) while Grr &lt; LIN_collide_max:\n6) Rotated_Relate_ball1_z__PLUS__Rotated_ball1_zol\n7) write_to_file_WEEE_STRANGE()\n8) freaky_rect_switcharoo_2D()", "user_title": "Mad Cloud Games", "datetimeon": "2011-04-03T18:28:23", "link": "pygame.draw.circle", "id": 3885}, {"content": "If you like to receive the inner rectangle, the blit is a much better setup. \nThe following comparing examples show how-to cut a (centered) 150x150 frame out of a 250x250 image:\norig_surf = pygame.Surface((250,250),flags=pygame.SRCALPHA)\npygame.draw.circle(orig_surf,(255,0,0),(50,50),25)\npygame.draw.circle(orig_surf,(0,255,0),(50,200),25)\npygame.draw.circle(orig_surf,(0,0,255),(200,50),25)\npygame.draw.circle(orig_surf,(0,255,255),(200,200),25)\n\ncrop_surf = pygame.transform.chop(pygame.transform.chop(orig_surf,(0,0,50,50)),(150,150,250,250))\npygame.image.save(crop_surf, 'test-crop.png')\n\n\ncrop_surf =  pygame.Surface((150,150),flags=pygame.SRCALPHA)\ncrop_surf.blit(orig_surf, (0,0),(50,50,200,200))\npygame.image.save(crop_surf, 'test-blit.png')", "user_title": "Rick van der Zwet", "datetimeon": "2011-05-05T04:36:44", "link": "pygame.transform.chop", "id": 4045}, {"content": "It all seemed simple and working properly, then I noticed... \"The area covered by a Rect does not include the right- and bottom-most edge of pixels. If one Rect's bottom border is another Rect's top border (i.e., rect1.bottom=rect2.top), the two meet exactly on the screen but do not overlap, and rect1.colliderect(rect2) returns false.\"\n\n*mutter* good to know.", "user_title": "Anonymous", "datetimeon": "2011-01-10T19:28:58", "link": "Rect.colliderect", "id": 3725}, {"content": "Note that when the user resizes the game window, pygame does not automatically update its internal screen surface. You must call set_mode() every time VIDEORESIZE is sent. This really should be more clear in the documentation.", "user_title": "Anonymous", "datetimeon": "2011-01-11T15:55:57", "link": "pygame.display", "id": 3726}, {"content": "Is it possible to set this mode transparent?\nI mean without changing the transparency with set_alpha or ... but from the beginning.", "user_title": "Anonymous", "datetimeon": "2011-01-13T08:28:22", "link": "pygame.display.set_mode", "id": 3727}, {"content": "Draw a normal thick line, then draw two aa lines either side. Not exactly what you want but it will work.", "user_title": "Anonymous", "datetimeon": "2011-01-13T15:22:43", "link": "pygame.draw.aaline", "id": 3728}, {"content": "This code fixes the bad rect given by the line function.\n\ntemprect=(pygame.draw.line(screen,color,firstpos,newpos,thick))\ntemprect.inflate_ip(thick*2, thick*2)\ndirty.append(temprect)", "user_title": "Anonymous", "datetimeon": "2005-11-22T22:22:44", "link": "pygame.draw.line", "id": 8}, {"content": "if your rect contains a negative width or height you need to rect.normalize() your rect before passing it to this function", "user_title": "Anonymous", "datetimeon": "2005-11-27T22:45:10", "link": "pygame.draw.ellipse", "id": 13}, {"content": "Rotates image about its center.", "user_title": "Anonymous", "datetimeon": "2005-11-28T19:22:44", "link": "pygame.transform.rotate", "id": 14}, {"content": "Make sure you blit according to the center of the newly formed surface, and not what the center of the orginal image is.", "user_title": "Anonymous", "datetimeon": "2005-11-28T19:24:48", "link": "pygame.transform.rotate", "id": 15}, {"content": "This probably goes without saying, but always rotate the orginal image, not a rotated copy.", "user_title": "Anonymous", "datetimeon": "2005-11-28T19:26:45", "link": "pygame.transform.rotate", "id": 16}, {"content": "Before calling pygame.key.get_pressed(), one should call pygame.event.pump() to get the lates state of the keyboard.\n\nThis is so because the get_pressed() function wraps the SDL_GetKeyState() function and in the SDL_GetKeyState() documentation it is written that one should use SDL_PumpEvents() to update the state array and pygame.event.pump() just happens to be a wrapper for SDL_PumpEvents() :-)", "user_title": "Anonymous", "datetimeon": "2005-12-01T10:30:49", "link": "pygame.key.get_pressed", "id": 18}, {"content": "When I tryed to use this, he couldn't find the key K_t I wanted\n untill I used:\n\nfrom pygame.locals import *\n\nSo be sure to use it - Shefy", "user_title": "Anonymous", "datetimeon": "2005-12-07T04:09:33", "link": "pygame.key.get_pressed", "id": 19}, {"content": "if you pass in None as the background argument, you get the error\n\"TypeError: Invalid background RGBA argument\"", "user_title": "Anonymous", "datetimeon": "2005-12-10T19:21:13", "link": "Font.render", "id": 22}, {"content": "pygame.event.pump()\n  m = pygame.key.get_mods()\n  if m &amp; KMOD_SHIFT:\n    print 'shift pressed'", "user_title": "Anonymous", "datetimeon": "2005-12-25T19:36:47", "link": "pygame.key.get_pressed", "id": 32}, {"content": "Rotated objects tend to move around because bounding rectangle changes size.\nStore the center in a temporary variable, then rotate the original image, and finally reset the center before you blit or update\nThis code comes from a sprite class:\n\n  def turn(self, amount):\n    \"turn some amount\"\n    oldCenter = self.rect.center\n    self.dir += amount\n    self.image = pygame.transform.rotate(self.baseImage, self.dir)\n    self.rect = self.image.get_rect()\n    self.rect.center = oldCenter", "user_title": "Anonymous", "datetimeon": "2006-01-03T09:48:09", "link": "pygame.transform.rotate", "id": 36}, {"content": "This effect (1 + 3 = 2) is caused by your X.org/XServer mouse configuration section, which allows to emulate the middle button by clicking both the left and right mouse button at the same time.", "user_title": "Anonymous", "datetimeon": "2006-01-04T09:16:25", "link": "pygame.mouse.get_pressed", "id": 37}, {"content": "This does not result in 'truly' transparent text, as the area between the letters is filled in with the background color. For truly transparent text with an invisible background behind the letters, use Numeric:\n\ndef RenderTransparent(font, text, antialias=1, color=(255, 0, 0, 0)):\n    'Render text with transparency underneath the letters'\n    'Requires Numeric'\n\n    # Create a colored block big enough to hold the text\n    w, h = font.size(text)\n    surface = pygame.Surface((w, h), pygame.SRCALPHA)\n    surface.fill(color)\n    \n    # Create an alpha channel that contains the shapes of the letters\n    alpha = pygame.Surface((w, h), pygame.SRCALPHA)\n    WHITE = (255, 255, 255, 0)\n    BLACK = (0, 0, 0, 0)\n    a = font.render(text, antialias, WHITE, BLACK)\n    alpha.blit(a, (0, 0))\n        \n    # Combine the alpha channel with the colored block\n    pic = surface.convert_alpha()\n    mask = alpha.convert(32)\n    mskarray = pygame.surfarray.pixels3d(mask)\n    pygame.surfarray.pixels_alpha(pic)[:, :] = mskarray[:, :, 0]\n\n    # Return the 'truly' transparent text.\n    return pic", "user_title": "Anonymous", "datetimeon": "2006-01-17T14:45:02", "link": "Font.render", "id": 41}, {"content": "LOL", "user_title": "Anonymous", "datetimeon": "2011-01-03T19:03:40", "link": "PixelArray.replace", "id": 3700}, {"content": "FUCKING SPAMMER MOTHER FUCKERS WHO OWNS THIS SHIT THEY SHOULD BURN IN HELLL", "user_title": "Anonymous", "datetimeon": "2011-01-03T19:05:09", "link": "pygame.locals", "id": 3701}, {"content": "On my Windows Vista machine running Python 3.1.2 and pygame 1.9.1,\nthe 'black=' and 'white=' parameters are swapped.\n\nSo, to make the example work (with a black arrow outline\naround a white center), you have to do this:\n\nthickarrow_strings = (            #sized 24x24\n      \"XX                      \",\n      \"XXX                     \",\n      \"XXXX                    \",\n      \"XX.XX                   \",\n      \"XX..XX                  \",\n      \"XX...XX                 \",\n      \"XX....XX                \",\n      \"XX.....XX               \",\n      \"XX......XX              \",\n      \"XX.......XX             \",\n      \"XX........XX            \",\n      \"XX........XXX           \",\n      \"XX......XXXXX           \",\n      \"XX.XXX..XX              \",\n      \"XXXX XX..XX             \",\n      \"XX   XX..XX             \",\n      \"     XX..XX             \",\n      \"      XX..XX            \",\n      \"      XX..XX            \",\n      \"       XXXX             \",\n      \"       XX               \",\n      \"                        \",\n      \"                        \",\n      \"                        \")\n\ndatatuple, masktuple = pygame.cursor.compile( thickarrow_strings,\n                                  black='.', white='X', xor='o' )\npygame.mouse.set_cursor( (24,24), (0,0), datatuple, masktuple )", "user_title": "Anonymous", "datetimeon": "2011-01-04T09:45:11", "link": "pygame.cursors.compile", "id": 3702}, {"content": "I'm using this generator to get a channel id for each sprite:\n\ndef free_sound_channel():\n    \"\"\"Get next available sound channel\n    Usage:\n    free_channels=free_sound_channel()\n    id=free_channels.next()\n    \"\"\"\n    id=0\n    while id&lt;pygame.mixer.get_num_channels():\n        yield id\n        id+=1\n    return    # or: raise StopIteration()", "user_title": "Anonymous", "datetimeon": "2006-01-29T16:18:15", "link": "pygame.mixer.Channel", "id": 49}, {"content": "COLORKEY and ALPHA should have 'SRC' prefixed to them. Here is a more-complete list of flags revelvant to surface.get_flags():\n,\"SRCCOLORKEY\"\n,\"RLEACCEL\"\n,\"RLEACCELOK\"\n,\"PREALLOC\"\n,\"HWACCEL\"\n,\"SRCALPHA\"\n,\"UYVY_OVERLAY\"\n,\"YV12_OVERLAY\"\n,\"YVYU_OVERLAY\"\n,\"YUY2_OVERLAY\"\n,\"HWPALETTE\"\nSWSURFACE - not really usable as a surface flag, equates to 0 and is always default\nANYFORMAT - used to create surfaces, pygame defaults to this flag if you don't specifya bit depth\nHWACCEL - surface is hardware accelerated, readonly\nSRCCOLORKEY- surface has a colorkey for blits, readonly\nSRCALPHA - surface has alpha enabled, readonly\nRLEACCELOK - surface is rle accelerated, but hasn't been compiled yet, readonly\nPREALLOC - not even sure?\nHope this helps....", "user_title": "Anonymous", "datetimeon": "2006-02-07T21:37:24", "link": "Surface.get_flags", "id": 52}, {"content": "I wish all the possible flags were documented here...", "user_title": "Anonymous", "datetimeon": "2006-02-07T22:02:57", "link": "pygame.Surface", "id": 53}, {"content": "I don't know what is wrong with you two. I tested the following and it worked as expected. Perhaps it is because I tested it on windows, if you tested it somewhere else (of course that's not the likely cause but I really can't see what else is wrong).\n\nIt is true that passing None for the final argument causes \"Invalid RGBA argument\". This is a bug in the documentation, not the code. The proper way to get transparency is to simply omit the last argument.\n\n$python\n&gt;&gt;&gt;import pygame\n&gt;&gt;&gt;pygame.init()\n&gt;&gt;&gt;screen = pygame.display.set_mode((300,300))\n&gt;&gt;&gt;screen.fill((255,0,0))\n&gt;&gt;&gt;pygame.display.flip()\n\n&gt;&gt;&gt;font = pygame.font.SysFont(\"Times New Roman\",30)\n&gt;&gt;&gt;s = font.render(\"Eggs are good for you, but not on the eiffel tower\",True,(0,255,255))\n&gt;&gt;&gt;s.get_flags() #-&gt; 65536 [SRCALPHA].. good, implies the image has per-pixel transparency\n&gt;&gt;&gt;[s.get_at((i,j)) for i in range(20) for j in range(20)]\n[....          #here we see that indeed each\n(0,255,255,68) #pixel is a full RGBA pixel with 4\n....]          #components.\n&gt;&gt;&gt;screen.blit(s, (0,0))\n&gt;&gt;&gt;pygame.display.flip()\n&gt;&gt;&gt;pygame.event.pump() #in order to bring the window back to life...\n\nAnd the result is turquoise text with red in the background, clearly showing transparency. Phew, you had me worried there, thinking I couldn't do transparency with this... until I looked closer. These docs are shiny but can be very hard to read sometimes.", "user_title": "Anonymous", "datetimeon": "2006-02-08T02:29:13", "link": "Font.render", "id": 54}, {"content": "Here's another solution for creating surfaces with per-pixel-alpha:\n\nimage = pygame.Surface((width,height),pygame.SRCALPHA,32);\n\nAdding the depth argument '32' seems to make this work every time.", "user_title": "Anonymous", "datetimeon": "2006-02-21T15:49:19", "link": "pygame.Surface", "id": 58}, {"content": "In the documentery it says \"The antialias argument is a boolean, if true the \ncharacters will have smooth edges.\". If you pass a string as the antialias \nargument it raises an exception saying \"TypeError: an integer is required\". This\nis very confusing. It should raise \"TypeError: a boolean is required\". \nIf antialias is enabled it will greatly drop the framerate (from 100 to 33 on my\nmachine). Font.render should be called only for as many times as you need fonts.\nDo not call this function every gameloop for it will greatly drop the framerate.\n(this cost me about 2 houres of debugging to find out.)\nIf any admins read this: Please change the script so that long lines will be seperated to shorter lines. Those 500+ words lines are uncomfortable to read with all that scrolling. mfg nwp.", "user_title": "Anonymous", "datetimeon": "2006-03-05T13:28:14", "link": "Font.render", "id": 61}, {"content": "you may want to initalise the \ndifferent modules seperately\nto speed up your program. Of \ncourse, then you would need \nto know which modules you have\ninitalised and which ones you\nhave not.", "user_title": "Anonymous", "datetimeon": "2006-03-08T22:55:41", "link": "pygame.init", "id": 64}, {"content": "", "user_title": "Anonymous", "datetimeon": "2006-12-30T07:59:42", "link": "Hope to find some more useful information on your site!  It is really great!", "id": 196}, {"content": "format of music files\non cds are (usualy) in\nCD Digital Audio, except\nsometimes a program will\nmake a cd useing a \ndifferent format, so \npygame.cdrom.CD(n).play()\nwill maby not play it.", "user_title": "Anonymous", "datetimeon": "2006-03-08T23:02:35", "link": "pygame.cdrom", "id": 67}, {"content": "import pygame\nfrom pygame.locals import *\n\npygame.init()\npygame.display.set_mode((300,200))\npygame.display.set_caption('Mouse Input Demonstration')\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            running = False\n        if event.type == KEYDOWN and event.key == K_ESCAPE:\n            running = False\n        if event.type == MOUSEBUTTONDOWN:\n            print event.button\n\npygame.display.quit()", "user_title": "Anonymous", "datetimeon": "2006-04-02T00:38:08", "link": "pygame.mouse.get_pressed", "id": 82}, {"content": "# An Example from perldude69@gmail.com  www.wachadoo.com/forum/\n# CONSTANTS\nSCREEN_WIDTH  = 800\nSCREEN_HEIGHT = 600\n#Initialise Game\npygame.init()\nscreen = pygame.display.set_mode( (SCREEN_WIDTH,SCREEN_HEIGHT))\npygame.display.set_caption('Space Invaders')\nbackground = pygame.image.load('./pics/background1.jpg').convert()\nbackground = pygame.transform.scale(background,( SCREEN_WIDTH, SCREEN_HEIGHT))\nscreen.blit(background, (0,0)) \npygame.display.flip() \ndone = False\nwhile not done:\n\tfor e in pygame.event.get():\n\t\tif e.type == KEYDOWN:\n\t\t\tdone = True\nif __name__ == \"__main__\":\n    main()", "user_title": "Anonymous", "datetimeon": "2006-04-07T18:04:11", "link": "pygame.transform.scale", "id": 84}, {"content": "Don't specify flags unless you absolutely *must* (that is, don't specify HWSURFACE, depth=32 just because you think it's a good idea). This will reduce the portability of your game.", "user_title": "Anonymous", "datetimeon": "2006-06-13T21:27:25", "link": "pygame.display.set_mode", "id": 98}, {"content": "Could someone please post the integer values corresponding to the various shift/ctl/alt keys?  Or provide a link.\nthank you!", "user_title": "Anonymous", "datetimeon": "2006-12-18T16:29:25", "link": "pygame.key.get_mods", "id": 183}, {"content": "numpy is fine in Python 3.1.2.  However, pygame.surfarray doesn't work\nat all in pygame-1.9.1.win32-py3.1.msi with python-3.1.2.msi and\nnumpy-1.5.1-win32-superpack-python3.1.exe under Windows Vista.\n\nTo see the problem, just run the test that comes with it; 4 of 14 tests fail:\n\nC:\\&gt;cd \\python31\\lib\\site-packages\\pygame\\tests\n\nC:\\Python31\\Lib\\site-packages\\pygame\\tests&gt;\\python31\\python surfarray_test.py\nEE.EE.........\n======================================================================\nERROR: test_array2d (__main__.SurfarrayModuleTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"surfarray_test.py\", line 147, in test_array2d\n    arr = pygame.surfarray.array2d(surf)\n  File \"C:\\python31\\lib\\site-packages\\pygame\\surfarray.py\", line 104, in array2d\n    return numpysf.array2d (surface)\n  File \"C:\\python31\\lib\\site-packages\\pygame\\_numpysurfarray.py\", line 77, in array2d\n    data = ''.join (pattern.findall (data))\nTypeError: can't use a string pattern on a bytes-like object\n[...snip...]", "user_title": "Anonymous", "datetimeon": "2011-01-07T03:47:28", "link": "pygame.surfarray", "id": 3704}, {"content": "no fill?", "user_title": "Anonymous", "datetimeon": "2006-11-19T14:38:36", "link": "pygame.draw.arc", "id": 163}, {"content": "works perfectly fine for me... question: what's the name of the overloaded operator that does the pxarray[x,y] subscripting?", "user_title": "Anonymous", "datetimeon": "2010-12-23T18:28:10", "link": "pygame.PixelArray", "id": 3689}, {"content": "pygame.cursors.ball is also a cool one.", "user_title": "Anonymous", "datetimeon": "2010-12-28T16:21:48", "link": "pygame.cursors", "id": 3690}, {"content": "Its a success/failure scenario. It returns True (1) if it went well.", "user_title": "Anonymous", "datetimeon": "2010-12-30T05:47:55", "link": "pygame.display.toggle_fullscreen", "id": 3691}, {"content": "These appear to be in degrees rather than radians (different than how draw.arc()'s are specified) which is kind of inconsistent.  Are these documented better elsewhere?", "user_title": "Anonymous", "datetimeon": "2011-01-01T15:04:01", "link": "pygame.gfxdraw.pie", "id": 3694}, {"content": "You need to put\nimport pygame\nat the top of your program, anonymous.", "user_title": "Anonymous", "datetimeon": "2011-01-02T07:03:47", "link": "pygame.display", "id": 3695}, {"content": "", "user_title": "Anonymous", "datetimeon": "2006-12-28T17:27:45", "link": "Looking for information and found it at this great site...", "id": 188}, {"content": "", "user_title": "Anonymous", "datetimeon": "2006-12-29T02:41:08", "link": "I love the whiiite suits! Great show!", "id": 189}, {"content": "", "user_title": "Anonymous", "datetimeon": "2006-12-29T10:09:22", "link": "Thank you for your site. I have found here much useful information...", "id": 190}, {"content": "I had this weird thing where blue/red was inversed, but not the other colours, when I was mapping some pixels from one image to a blank surface.\nIt was caused by copying the color integer directly to one pixel to the other, so the trick is to always surface.unmap_rgb(pixel) before setting the color to a new pixel", "user_title": "Anonymous", "datetimeon": "2010-12-13T21:22:42", "link": "pygame.PixelArray", "id": 3685}, {"content": ".", "user_title": "Anonymous", "datetimeon": "2010-12-17T14:01:47", "link": "Movie.play", "id": 3687}, {"content": "import pygame, sys\nfrom pygame.version import ver\nprint (\"pygame \", ver)\nstartstate = pygame.init()\nprint (\"{pygame.init()}\", startstate)\nscreen = pygame.display.set_mode([640, 480])\nprint (\"{pygame.display.set_mode([640, 480]}\", screen)\nwhile True:\n    for event in pygame.event.get():\n        if not event:\n            print (\"Event processing error: cannot find event.\")\n        elif event.type == pygame.QUIT or event.type == pygame.K_ESCAPE:\n            print (\"{for event in pygame.event.get():} : \", event)\n            sys.exit()\nsys.exit() command does not run when I press escape, all it does is the same as if not event.", "user_title": "Anonymous", "datetimeon": "2010-12-18T17:09:49", "link": "pygame.key", "id": 3688}, {"content": "It the range for H should only be [0, 360); at exactly 360 the expression throws an OverflowError. The other ranges are not affected as such.", "user_title": "Anonymous", "datetimeon": "2010-12-08T17:55:35", "link": "Color.hsva", "id": 3677}, {"content": "", "user_title": "Anonymous", "datetimeon": "2006-12-30T22:35:22", "link": "Very cool design! Useful information. Go on!", "id": 202}, {"content": "", "user_title": "Anonymous", "datetimeon": "2006-12-31T05:52:59", "link": "Very interesting! site. A must bookmark! I wait for continuation", "id": 203}, {"content": "", "user_title": "Anonymous", "datetimeon": "2006-12-31T13:03:40", "link": "Very interesting! site. A must bookmark! I wait for continuation", "id": 204}, {"content": "", "user_title": "Anonymous", "datetimeon": "2006-12-31T19:55:09", "link": "Just wanted to say you have some happyY looking walkers. All natural!", "id": 205}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-01T16:59:55", "link": "You have an outstanding good and well structured site. I enjoyed browsing through it.", "id": 208}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-02T00:19:19", "link": "I love the whiiite suits! Great show!", "id": 211}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-02T15:12:24", "link": "Hope to find some more useful information on your site!  It is really great!", "id": 212}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-02T22:17:19", "link": "Just wanted to say you have some happyY looking walkers. All natural!", "id": 213}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-03T05:35:22", "link": "You have a great site. All in your web is very useful. Please keep on working.", "id": 214}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-03T12:53:55", "link": "Pretty nice site, wants to see much more on it! :)", "id": 215}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-03T20:02:38", "link": "You have an outstanding good and well structured site. I enjoyed browsing through it.", "id": 216}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-04T18:10:07", "link": "This site is asomeee, well done, thanks for all!", "id": 218}, {"content": "", "user_title": "Anonymous", "datetimeon": "2007-01-05T01:15:13", "link": "Very nice site. Keep up the great work.", "id": 219}, {"content": "Left:\nctrl 4160 \nshift 4097 \nalt 4352 \n\nRight:\nctrl 4224\nshift 4098\nalt 4608\n\nLeft:\nc+s 4161\nc+a 4416\na+s 4353\n\nRight:\nc+s 4226\nc+a 4736\na+s 4610\n\nDone by hand ;)\n\n-Jabapyth", "user_title": "Anonymous", "datetimeon": "2007-01-29T17:22:04", "link": "pygame.key.get_mods", "id": 316}, {"content": "Depending on your keyboard there may be limitations of how many simultaneous keypresses can be detected by this command. Some combinations will work on one keyboard and not on another.", "user_title": "Anonymous", "datetimeon": "2007-02-08T19:53:05", "link": "pygame.key.get_pressed", "id": 335}, {"content": "Just use the same line width as your radius.\nThis of course dosn't solve your problem if you want a border on your arc, but then you can just paint twice.", "user_title": "Anonymous", "datetimeon": "2007-02-26T18:27:17", "link": "pygame.draw.arc", "id": 374}, {"content": "It looks like width is not a keyword argument, but a required/positional/whatever one instead.\n\n&gt;&gt;&gt; pygame.draw.line(surf, color, (x1, y1), (x2, y2), width=width)\nTraceback (most recent call last):\n  File \"\", line 1, in ?\nTypeError: line() takes no keyword arguments\n&gt;&gt;&gt; pygame.draw.line(surf, color, (x1, y1), (x2, y2))\n\n&gt;&gt;&gt; pygame.draw.line(surf, color, (x1, y1), (x2, y2), 1)", "user_title": "Anonymous", "datetimeon": "2007-03-01T11:28:42", "link": "pygame.draw.line", "id": 386}, {"content": "first number = top left rectangle x coordinate\nsecond number = top left rectangle y coordinate\nthird number = width of rectangle\nfourth number = length of rectangle", "user_title": "Anonymous", "datetimeon": "2007-03-03T16:39:29", "link": "pygame.draw.rect", "id": 400}, {"content": "If you want to make a deep copy of a Rect object (without importing the copy module)\nthen you can do so by calling move with the arguments (0,0).", "user_title": "Anonymous", "datetimeon": "2008-01-04T00:22:04", "link": "Rect.move", "id": 1359}, {"content": "the forth numer is the height of the rect", "user_title": "Anonymous", "datetimeon": "2007-03-11T20:32:13", "link": "pygame.draw.rect", "id": 434}, {"content": "The documentation is incorrect. pygame.mixer.music(5) will indeed play the music five times, not six. Perhaps the function used to behave differently, but I can find nothing in the documentation for either pygame or SDL_mixer that suggests so.", "user_title": "Anonymous", "datetimeon": "2007-03-19T15:33:19", "link": "pygame.mixer.music.play", "id": 440}, {"content": "I meant to say pygame.mixer.music.play(5), of course. I left out the \"play\" part.", "user_title": "Anonymous", "datetimeon": "2007-03-19T15:34:19", "link": "pygame.mixer.music.play", "id": 441}, {"content": "Properties in the object returned by get_rect():\n\nbottom\nbottomleft\nbottomright\ncenter\ncenterx\ncentery\nclamp\nclamp_ip\nclip\ncollidedict\ncollidedictall\ncollidelist\ncollidelistall\ncollidepoint\ncolliderect\ncontains\nfit\nh\nheight\ninflate\ninflate_ip\nleft\nmidbottom\nmidleft\nmidright\nmidtop\nmove\nmove_ip\nnormalize\nright\nsize\ntop\ntopleft\ntopright\nunion\nunion_ip\nunionall\nunionall_ip\nw\nwidth\nx\ny", "user_title": "Anonymous", "datetimeon": "2007-03-23T00:10:38", "link": "Surface.get_rect", "id": 446}, {"content": "i've noticed the loop functionality to be iffy for certain wave files (an audible gap between each loop). from what i can tell, it looks like this happens with stereo wave files, but i'm not completely sure. the mono waves i try to loop play as expected", "user_title": "Anonymous", "datetimeon": "2008-01-04T23:39:18", "link": "pygame.mixer.music.fadeout", "id": 1365}, {"content": "i've noticed the loop functionality to be iffy for certain wave files (an audible gap between each loop). from what i can tell, it looks like this happens with stereo wave files, but i'm not completely sure. the mono waves i try to loop play as expected (i accidentally added this comment to fadeout(), sorry)", "user_title": "Anonymous", "datetimeon": "2008-01-04T23:39:59", "link": "pygame.mixer.music.play", "id": 1366}, {"content": "what about osx? is macosx working?", "user_title": "Anonymous", "datetimeon": "2007-03-25T15:39:01", "link": "pygame.display.init", "id": 448}, {"content": "omg, you should really use the KMOD_ constants here", "user_title": "Anonymous", "datetimeon": "2007-03-28T15:20:15", "link": "pygame.key.get_mods", "id": 451}, {"content": "In 1.7.1, the behaviour when None is passed in is NOT reversed. pygame.event.set_allowed(None) will BLOCK all events.", "user_title": "Anonymous", "datetimeon": "2007-04-01T20:22:29", "link": "pygame.event.set_allowed", "id": 457}, {"content": "just do:\nimg = pygame.image.load(\"&lt;&gt;\").convert()\n\n-harry666t", "user_title": "Anonymous", "datetimeon": "2007-04-03T12:22:16", "link": "pygame.draw", "id": 463}, {"content": "BTW, Those values gotten below are if num-lock is on\nKMOD_NUM == 4096\nKMOD_LSHIFT == 1\nKMOD_RSHIFT == 2\nKMOD_NUM | KMOD_LSHIFT == 4097\nThe simpler way is to use the bitwise AND (&amp;)\n\nkeymods &amp; KMOD_LSHIFT \n\nreturns true (actually 1 in this case) if left shift is pressed, no matter what else is pressed or if num lock is on, or if the planets are aligned correctly.", "user_title": "Anonymous", "datetimeon": "2007-04-03T19:15:04", "link": "pygame.key.get_mods", "id": 466}, {"content": "What is the definition of the key and mod members of KEYDOWN?", "user_title": "Anonymous", "datetimeon": "2007-04-07T05:35:39", "link": "pygame.event", "id": 475}, {"content": "who do i get a reference to a reserved channel? its not channel 0 nor num_channels-1", "user_title": "Anonymous", "datetimeon": "2007-04-07T11:19:42", "link": "pygame.mixer.set_reserved", "id": 476}, {"content": "\"does not work with current release\". Which release is that? Is the information valid?", "user_title": "Anonymous", "datetimeon": "2007-04-18T13:12:55", "link": "pygame.movie", "id": 497}, {"content": "FLAC support would be cool", "user_title": "Anonymous", "datetimeon": "2007-11-19T06:00:08", "link": "pygame.mixer.Sound", "id": 1142}, {"content": "fadeout does not block in linux either", "user_title": "Anonymous", "datetimeon": "2008-01-01T21:41:36", "link": "pygame.mixer.music.fadeout", "id": 1351}, {"content": "Watch out for this one, it has a major twist:\n(x,y) are coordinates in the referential of the rectangle.\nFor instance:\n&gt;&gt;&gt; import pygame\n&gt;&gt;&gt; r = pygame.Rect(32,32,132,132)\n&gt;&gt;&gt; r.collidepoint(140,140)\n1", "user_title": "Anonymous", "datetimeon": "2007-04-20T17:57:54", "link": "Rect.collidepoint", "id": 502}, {"content": "Music will be resampled in some cases, not in others. When playing a 44.1kHz MP3, the default 22050 frequency works, but a 48kHz mp3 plays in less than half speed - 48000 or 24000 works then.\nTo handle this behaviour, you have to know the sample rate of your music files before playing them, and can't switch smoothly. Big bummer.", "user_title": "Anonymous", "datetimeon": "2008-01-13T07:45:26", "link": "pygame.mixer.music.play", "id": 1406}, {"content": "# This should draw a square with a hight of 20 pixels on a Surface:\nheight = 20\npygame.draw.rect(Surface, (255, 255, 255), (0, 0, height, height))", "user_title": "Anonymous", "datetimeon": "2007-12-06T15:43:11", "link": "pygame.draw.rect", "id": 1220}, {"content": "Anonymous[0], that's nonsense. The x,y coords are absolute coordinates. To illustrate:\n\n&gt;&gt;&gt; r = pygame.rect.Rect(32, 32, 132, 132)\n&gt;&gt;&gt; r.collidepoint(1,1)\n0\n&gt;&gt;&gt; r.collidepoint(32,32)\n1", "user_title": "Anonymous", "datetimeon": "2007-11-23T19:43:53", "link": "Rect.collidepoint", "id": 1153}, {"content": "A little black cross. Mouse cursor is 8*8 Pixel, hotspot is at (4, 4). \nthe cross is (Read Binary):\n00011000 =&gt; 24 \n00011000\n00011000\n11100111 =&gt; 231\n11100111\n00011000\n00011000\nand has no AND-Mask. \n\npygame.mouse.set_cursor((8, 8), (4, 4), (24, 24, 24, 231, 231, 24, 24, 24), (0, 0, 0, 0, 0, 0, 0, 0))", "user_title": "Anonymous", "datetimeon": "2007-11-26T11:20:04", "link": "pygame.mouse.set_cursor", "id": 1157}, {"content": "excellent comments!\njorgen", "user_title": "Anonymous", "datetimeon": "2007-11-26T19:56:49", "link": "Surface.fill", "id": 1158}, {"content": "True.  set_allowed(None) blocks all event types.\n\n- Another (initially skeptical) pygame user.", "user_title": "Anonymous", "datetimeon": "2007-11-26T22:35:30", "link": "pygame.event.set_blocked", "id": 1159}, {"content": "The first channels are reserved.\nFor example: pygame.mixer.Channel(0)", "user_title": "Anonymous", "datetimeon": "2007-11-27T12:11:21", "link": "pygame.mixer.set_reserved", "id": 1160}, {"content": "I have found that just watching for joystick events may not provide enough \ngranularity for fast-paced arcade games that require 100 millisecond changes.\nInstead of events, consider polling the status of the axes in the main game loop\n(or whatever your local equivalent is)", "user_title": "Anonymous", "datetimeon": "2007-12-08T11:08:32", "link": "pygame.joystick", "id": 1230}, {"content": "Actually, on my system [Ubunty Gutsy] it returned a list of None:\n&gt;&gt;&gt; import pygame\n&gt;&gt;&gt; pygame.font.get_fonts()\n[None]", "user_title": "Anonymous", "datetimeon": "2007-12-12T08:11:00", "link": "pygame.font.get_fonts", "id": 1242}, {"content": "How do you draw squares in pygame??", "user_title": "Anonymous", "datetimeon": "2007-11-29T13:19:20", "link": "pygame.draw.rect", "id": 1171}, {"content": "\"... will only effect the smaller area\" is probably meant to read \"... will only affect the smaller area\"", "user_title": "Anonymous", "datetimeon": "2007-12-20T07:32:23", "link": "pygame.Surface", "id": 1290}, {"content": "# Matthew N. Brown copyright 2007\n\n# Here is an example program in wich\n# balls hit walls and other balls:\n#\n# This program draws circles using:   pygame.draw.circle\n#\n# You can copy this program on to\n# your own computer and run it.\n#\n\nimport os, sys\n\n ## INIT STUFF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\ndef HE_HE_init():\n    global screen, big_black_rect, APPLICATION_w_size, APPLICATION_z_size\n    global WOW_pi_divided_by_180, WOW_180_divided_by_pi\n    pygame.init()\n    random.seed()\n    APPLICATION_w_size = 700\n    APPLICATION_z_size = 500\n    ##### To close window while in fullscreen, press Esc while holding shift. #######\n    screen = pygame.display.set_mode((APPLICATION_w_size, APPLICATION_z_size))\n    #screen = pygame.display.set_mode((APPLICATION_w_size, APPLICATION_z_size), FULLSCREEN)\n    pygame.display.set_caption(\"They bwounce off bwalls? Matthew N. Brown copyright 2007\")\n    pygame.mouse.set_visible(1)\n    big_black_rect = pygame.Surface(screen.get_size())\n    big_black_rect = big_black_rect.convert()\n    big_black_rect.fill((0, 0, 0))\n    screen.blit(big_black_rect, (0, 0))\n    #fonty = pygame.font.Font(None, 36)\n    fonty = pygame.font.SysFont(\"Times New Roman\", 25)\n    fonty.set_bold(0)\n    IMAGEE = fonty.render('Loading . . .', 1, (0, 250, 10))\n    screen.blit(IMAGEE, (100, 200)); del IMAGEE\n    pygame.display.flip()\n    pygame.mixer.init(22050, -16, True, 1024)\n    WOW_pi_divided_by_180 = math.pi / 180.0\n    WOW_180_divided_by_pi = 180.0 / math.pi\n    set_up_key_variables()\n    Lets_ROLL()\n ## INIT STUFF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\n\n ## SAVE LEVEL?!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\ndef write_to_file_WEEE_STRANGE(file_namey, data):\n    noq = '\\n'\n    filey = open(file_namey, 'w')\n    for d in data:\n     filey.write(   str(d) + noq)\n ## SAVE LEVEL?!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\n\n ## SMALL FUNCTIONS STUFF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\n     ### some functions: ###\ndef distance_2D (w1, z1, w2, z2):\n    return math.sqrt(math.pow(float(w1) - float(w2), 2) + math.pow(float(z1) - float(z2), 2))\ndef rect_touching_rect(w1, z1, wol1, zol1, w2, z2, wol2, zol2):\n    w2 -= w1\n    z2 -= z1\n    ww1 = -wol2\n    zz1 = -zol2\n    return (w2 &gt; ww1 and w2 &lt; wol1 and z2 &gt; zz1 and z2 &lt; zol1)\ndef rect_touching_rect2(w1, z1, wol1, zol1, w2, z2, wol2, zol2):\n    w2 -= w1\n    z2 -= z1\n    ww1 = -wol2\n    zz1 = -zol2\n    return (w2 &gt;= ww1 and w2 &lt;= wol1 and z2 &gt;= zz1 and z2 &lt;= zol1)\ndef positive(n):\n    if n &lt; 0: n = -n; return n\ndef int_randy(range, add):\n    return int((random.random() * range) + add)\ndef randy(range, add):\n    return (random.random() * range) + add\ndef freaky_rect_switcharoo_2D(pw, pz, pwol, pzol, buffy_the_fat):\n    buffy_the_fat2 = buffy_the_fat * 2\n    if pwol &gt; 0:\n     gw = pw; gwol = pwol\n    else:\n     gw = pwol + pw; gwol = pw - gw\n    if pzol &gt; 0:\n     gz = pz; gzol = pzol\n    else:\n     gz = pzol + pz; gzol = pz - gz\n    return [gw - buffy_the_fat, gz - buffy_the_fat, gwol + buffy_the_fat2, gzol + buffy_the_fat2]\ndef points_rotated_by_angle_2D(points_wz, axis_w, axis_z, angle):\n    rotated_points_wz = []\n    angle = -angle -90\n    angle_times_WOW_pi_divided_by_180 = angle * WOW_pi_divided_by_180\n    c1 = math.cos(angle_times_WOW_pi_divided_by_180)\n    s1 = math.sin(angle_times_WOW_pi_divided_by_180)\n    for pointy in points_wz:\n     xt = pointy[0] - axis_w\n     yt = pointy[1] - axis_z\n     rotated_points_wz += [(-xt * s1) + (yt * c1) + axis_w, (-xt * c1) - (yt * s1) + axis_z]\n    return rotated_points_wz\ndef point_rotated_by_angle_2D(point_w, point_z, axis_w, axis_z, angle):\n    angle = -angle -90\n    angle_times_WOW_pi_divided_by_180 = angle * WOW_pi_divided_by_180\n    c1 = math.cos(angle_times_WOW_pi_divided_by_180)\n    s1 = math.sin(angle_times_WOW_pi_divided_by_180)\n    xt = point_w - axis_w\n    yt = point_z - axis_z\n    return (-xt * s1) + (yt * c1) + axis_w, (-xt * c1) - (yt * s1) + axis_z\ndef arc_tangent_2D(point_w, point_z):\n    return math.atan2(point_w, point_z) * WOW_180_divided_by_pi + 180\ndef arc_tangent_2D_2(point_w, point_z):\n    return -math.atan2(point_w, point_z) * WOW_180_divided_by_pi + 180\ndef ball_to_ball_wzkol_bounce(V1, m1, V2, m2, ball1_is_to_the_left):\n    if (ball1_is_to_the_left and V1 &gt;= V2) or (not ball1_is_to_the_left and V1 &lt;= V2):\n     Rv1 = V1 - V2\n     Rv2 = 0 #V2 - V2\n     NewV1 = ((m1 - m2) / float(m1 + m2)) * float(Rv1) + V2\n     NewV2 = (( 2 * m1) / float(m1 + m2)) * float(Rv1) + V2\n     return NewV1, NewV2\n    else:\n     return V1, V2\ndef Find_where_ball_stops_on_line_w(ball_w, ball_z, ball_wol, ball_zol, ball_rad, line_w, line_rad):\n    did_collide = False\n    totally = ball_rad + line_rad\n    b1 = line_w + totally\n    b2 = line_w - totally\n    New_ball_w = ball_w + ball_wol\n    New_ball_z = ball_z + ball_zol\n    if   ball_w &gt;= b1 and ball_wol &lt; 0 and New_ball_w &lt; b1: New_ball_w = b1; did_collide = True\n    elif ball_w &lt;= b2 and ball_wol &gt; 0 and New_ball_w &gt; b2: New_ball_w = b2; did_collide = True\n    else:\n     if ball_w &gt; b2 and ball_w &lt; b1:\n      if   ball_w &gt; line_w and ball_wol &lt; 0:\n       New_ball_w = ball_w; New_ball_z = ball_z\n       did_collide = True\n      elif ball_w &lt; line_w and ball_wol &gt; 0:\n       New_ball_w = ball_w; New_ball_z = ball_z\n       did_collide = True\n     return New_ball_w, New_ball_z, did_collide\n    New_ball_z = (float(ball_zol) / float(ball_wol) * float(New_ball_w - ball_w)) + float(ball_z)\n    return New_ball_w, New_ball_z, did_collide\ndef find_where_ball_collides_on_a_wall(\n                                       ball_w, ball_z,\n                                       ball_wol, ball_zol,\n                                       ball_rad,\n                                       wall_type,\n                                       wall_w1, wall_z1,\n                                       wall_w2, wall_z2,\n                                       wall_rad):\n    toetoadly = ball_rad + wall_rad\n    did_collide = False\n    New_ball_w = ball_w + ball_wol\n    New_ball_z = ball_z + ball_zol\n    angle_hit_at = None\n    Relate_ball_w = ball_w - wall_w1\n    Relate_ball_z = ball_z - wall_z1\n    Relate_wall_w2 = wall_w2 - wall_w1\n    Relate_wall_z2 = wall_z2 - wall_z1\n    arc_tangeriney = arc_tangent_2D(Relate_wall_w2, Relate_wall_z2)\n    Rotate_Relate_ball_w, Rotate_Relate_ball_z, Rotate_Relate_wall_w2, Rotate_Relate_wall_z2 = points_rotated_by_angle_2D(((Relate_ball_w, Relate_ball_z), (Relate_wall_w2, Relate_wall_z2)), 0, 0, arc_tangeriney)\n    Rotate_ball_wol, Rotate_ball_zol = point_rotated_by_angle_2D(ball_wol, ball_zol, 0, 0, arc_tangeriney)\n    Rotate_Relate_ball_collide_w, Rotate_Relate_ball_collide_z, did_hit_weird_line = Find_where_ball_stops_on_line_w(Rotate_Relate_ball_w, Rotate_Relate_ball_z, Rotate_ball_wol, Rotate_ball_zol, ball_rad, 0, wall_rad)\n    if Rotate_Relate_ball_w &gt; -toetoadly and Rotate_Relate_ball_w &lt; toetoadly:\n     HE_HE_strange_popper_z = Rotate_Relate_ball_z\n    else:\n     HE_HE_strange_popper_z = Rotate_Relate_ball_collide_z\n    Rotate_angle_hit_at = None\n    if   HE_HE_strange_popper_z &lt; Rotate_Relate_wall_z2:\n       if ball_is_going_towards_point(Rotate_Relate_ball_w, Rotate_Relate_ball_z, Rotate_ball_wol, Rotate_ball_zol, 0, Rotate_Relate_wall_z2):\n        p1_touched, p1_collide_w, p1_collide_z, p1_angle_hit_at = find_where_ball_collides_on_another_ball(Rotate_Relate_ball_w, Rotate_Relate_ball_z, Rotate_ball_wol, Rotate_ball_zol, ball_rad, 0, Rotate_Relate_wall_z2, wall_rad)\n        if p1_touched:\n         Rotate_Relate_ball_collide_w = p1_collide_w\n         Rotate_Relate_ball_collide_z = p1_collide_z\n         Rotate_angle_hit_at = p1_angle_hit_at\n         did_collide = True\n    elif HE_HE_strange_popper_z &gt; 0:\n       if ball_is_going_towards_point(Rotate_Relate_ball_w, Rotate_Relate_ball_z, Rotate_ball_wol, Rotate_ball_zol, 0, 0):\n        p2_touched, p2_collide_w, p2_collide_z, p2_angle_hit_at = find_where_ball_collides_on_another_ball(Rotate_Relate_ball_w, Rotate_Relate_ball_z, Rotate_ball_wol, Rotate_ball_zol, ball_rad, 0, 0, wall_rad)\n        if p2_touched:\n         Rotate_Relate_ball_collide_w = p2_collide_w\n         Rotate_Relate_ball_collide_z = p2_collide_z\n         Rotate_angle_hit_at = p2_angle_hit_at\n         did_collide = True\n    else:\n       if did_hit_weird_line:\n        did_collide = True\n        if Rotate_Relate_ball_collide_w &lt; 0: Rotate_angle_hit_at = 90\n        else: Rotate_angle_hit_at = 270\n    if did_collide:\n     arc_tangeriney_2 = -arc_tangeriney\n     angle_hit_at = Rotate_angle_hit_at + arc_tangeriney\n     New_ball_w, New_ball_z = point_rotated_by_angle_2D(Rotate_Relate_ball_collide_w, Rotate_Relate_ball_collide_z, 0, 0, arc_tangeriney_2)\n     New_ball_w += wall_w1\n     New_ball_z += wall_z1\n    return did_collide, New_ball_w, New_ball_z, angle_hit_at  #, is_moving_towards\ndef zol_at_angle(wol, zol, angle):\n    rotated_wol, rotated_zol = point_rotated_by_angle_2D(wol, zol, 0, 0, angle)\n    return rotated_zol\ndef wzol_bounce_at_angle(wol, zol, angle, multi):\n    rotated_wol, rotated_zol = point_rotated_by_angle_2D(wol, zol, 0, 0, angle)\n    if rotated_zol &gt; 0: rotated_zol = -rotated_zol * multi\n    return point_rotated_by_angle_2D(rotated_wol, rotated_zol, 0, 0, -angle)\ndef ball_is_going_towards_point(ball_w, ball_z, ball_wol, ball_zol, point_w, point_z):\n    angley = arc_tangent_2D(ball_w - point_w, ball_z - point_z)\n    rotated_wol, rotated_zol = point_rotated_by_angle_2D(ball_wol, ball_zol, 0, 0, angley)\n    return rotated_zol &gt; 0\ndef find_where_ball_collides_on_another_ball (\n                                               ball1_w, ball1_z,\n                                               ball1_wol, ball1_zol,\n                                               ball1_rad,\n                                               ball2_w, ball2_z,\n                                               ball2_rad\n                                             ):\n    totally = ball1_rad + ball2_rad\n    dis_from_each_other = math.sqrt(math.pow(float(ball1_w) - float(ball2_w), 2) + math.pow(float(ball1_z) - float(ball2_z), 2))\n    if dis_from_each_other &lt; totally:\n     angley = arc_tangent_2D(ball1_w - ball2_w, ball1_z - ball2_z)\n     return True, ball1_w, ball1_z, angley\n    else:\n        they_did_touch = False\n        New_ball1_w = ball1_w + ball1_wol\n        New_ball1_z = ball1_z + ball1_zol\n        angle_hit_at = None\n        Relate_ball1_w = ball1_w - ball2_w\n        Relate_ball1_z = ball1_z - ball2_z\n        Relate_ball2_w = 0\n        Relate_ball2_z = 0\n        arcy_tangeriney = arc_tangent_2D(ball1_wol, ball1_zol)\n        Rotated_Relate_ball1_w, Rotated_Relate_ball1_z, Rotated_ball1_wol, Rotated_ball1_zol = points_rotated_by_angle_2D(((Relate_ball1_w, Relate_ball1_z), (ball1_wol, ball1_zol)), 0, 0, arcy_tangeriney)\n        did_collidey = False\n        if Rotated_Relate_ball1_z &gt; 0 and (Rotated_Relate_ball1_w &gt; -totally and Rotated_Relate_ball1_w &lt; totally):\n         Rotated_Relate_ball1_collide_w = Rotated_Relate_ball1_w # + Rotated_ball1_wol\n         HE_HE = math.pow(Rotated_Relate_ball1_w, 2) - math.pow(totally, 2)\n         if HE_HE &lt; 0: HE_HE = -HE_HE\n         Rotated_Relate_ball1_collide_z = math.sqrt(HE_HE)\n         Rotated_Relate_ball1_z__PLUS__Rotated_ball1_zol = Rotated_Relate_ball1_z + Rotated_ball1_zol\n         if Rotated_Relate_ball1_collide_z &lt; Rotated_Relate_ball1_z__PLUS__Rotated_ball1_zol:\n          collision_wol = Rotated_ball1_wol\n          collision_zol = Rotated_ball1_zol\n          Rotated_Relate_ball1_collide_z = Rotated_Relate_ball1_z__PLUS__Rotated_ball1_zol\n          angley_to_hit = None\n         else:\n          did_collidey = True\n          they_did_touch = True\n          angley_to_hit = arc_tangent_2D(Rotated_Relate_ball1_collide_w, Rotated_Relate_ball1_collide_z)\n        else:\n         angley_to_hit = None\n         collision_wol = Rotated_ball1_wol\n         collision_zol = Rotated_ball1_zol\n         Rotated_Relate_ball1_collide_w = Rotated_Relate_ball1_w + Rotated_ball1_wol\n         Rotated_Relate_ball1_collide_z = Rotated_Relate_ball1_z + Rotated_ball1_zol\n        if did_collidey:\n         arcy_tangeriney_2 = -arcy_tangeriney\n         angle_hit_at = angley_to_hit + arcy_tangeriney\n         New_ball1_w, New_ball1_z = point_rotated_by_angle_2D(Rotated_Relate_ball1_collide_w, Rotated_Relate_ball1_collide_z, 0, 0, arcy_tangeriney_2)\n         New_ball1_w += ball2_w\n         New_ball1_z += ball2_z\n    return they_did_touch, New_ball1_w, New_ball1_z, angle_hit_at  #, New_ball1_wol, New_ball1_zol\n     ### some functions: ###\n\n ## GRAPHICS STUFF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\ndef chilly_font(size):\n    fonti = pygame.font.SysFont(\"Times New Roman\", size)\n    return fonti\ndef chilly_font_Italicy(size):\n    fonti = pygame.font.SysFont(\"Times New Roman\", size)\n    fonti.set_italic(1)\n    return fonti\ndef draw_loading_messagey(stringy): # Draw loading message\n    pygame.mouse.set_visible(1)\n    fonty = chilly_font(26)\n    IMAGEE = fonty.render(stringy, 0, (0, 255, 0), (0, 0, 0))\n    screen.blit(IMAGEE, (200, 250))\n    del IMAGEE\n    pygame.display.flip()\n           ## GRAPHICS STUFF: ##\n#########################################################################################\n\n ## KEYS AND MOUSE STUFF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\ndef set_up_key_variables():\n     global ky_held, ky_first_held, ky_time_last_pressed\n     global mowse_w, mowse_z, mowse_inn\n     global mowse_left_pressed, mowse_right_pressed, mowse_left_held, mowse_right_held\n     mowse_left_held = False\n     mowse_right_held = False\n     mowse_left_pressed = False\n     mowse_right_pressed = False\n     mowse_w = 0\n     mowse_z = 0\n     mowse_inn = 0\n     ky_held = []\n     ky_first_held = []\n     ky_time_last_pressed = []\n     m = -1\n     while m &lt; 500:\n      m += 1\n      ky_held              += [0]\n      ky_first_held        += [0]\n      ky_time_last_pressed += [0]\ndef clear_all_kys():\n    global mowse_left_pressed, mowse_right_pressed, mowse_left_held, mowse_right_held\n    mowse_left_held = False\n    mowse_right_held = False\n    mowse_left_pressed = False\n    mowse_right_pressed = False\n    m = -1\n    while (m &lt; 500):\n     m += 1; ky_held[m] = 0; ky_first_held[m] = 0; ky_time_last_pressed[m] = 0\ndef clear_these_ky_first_held(list_keys_numbers):\n    for k in list_keys_numbers:\n     ky_first_held[k] = 0\ndef clear_first_held_kys():\n    m = -1\n    while (m &lt; 500):\n     m += 1; ky_first_held[m] = 0\ndef old_style_ky(n):\n    return (ky_first_held_CEV(n) or (ky_held[n] and ky_time_last_pressed[n] &lt; time.time() - .3))\ndef ky_first_held_CEV(n):\n    if (ky_first_held[n]):\n     ky_first_held[n] = 0; return 1\n    else:\n     return 0\ndef mowse_in_rect (w, z, wol, zol):\n    return (mowse_w &gt;= w and mowse_z &gt;= z and mowse_w &lt;= w + wol and mowse_z &lt;= z + zol)\ndef mowse_in_circle (w, z, rad):\n    dia = rad * 2\n    if mowse_in_rect(w - rad, z - rad, w + dia, z + dia):\n     return (distance_2D(mowse_w, mowse_z, w, z) &lt; rad)\n    else:\n     return 0\n    ## CHECK FOR: KEYBOARD, MOUSE, JOYSTICK, AND OTHERY INPUTY: ##\ndef check_for_keys():\n        global mowse_w, mowse_z, mowse_inn, mowse_left_pressed, mowse_right_pressed, mowse_left_held, mowse_right_held, APPLICATION_w_size, APPLICATION_z_size\n        global loopy\n        global unicodey\n        mowse_left_pressed = False\n        mowse_right_pressed = False\n        unicodey = ''\n        for e in pygame.event.get():\n          if e.type == QUIT:\n            loopy = 0\n          elif e.type == ACTIVEEVENT:\n            mowse_inn = (e.gain and (e.state == 1 or e.state == 6))\n          elif e.type == KEYDOWN:\n            ky_held[e.key] = 1\n            ky_first_held[e.key] = 1\n            ky_time_last_pressed[e.key] = time.time()\n            unicodey = e.unicode\n          elif e.type == KEYUP:\n            ky_held[e.key] = 0\n          elif e.type == MOUSEMOTION:\n            mowse_w = e.pos[0]\n            mowse_z = e.pos[1]\n            if mowse_w &gt;= 0 and mowse_w &lt;= APPLICATION_w_size and mowse_z &gt;= 0 and mowse_z &lt;= APPLICATION_z_size:\n             mowse_inn = 1\n            else:\n             mowse_inn = 0\n          elif e.type == MOUSEBUTTONUP:\n            if e.button == 1: mowse_left_held = 0\n            if e.button == 3: mowse_right_held = 0\n          elif e.type == MOUSEBUTTONDOWN:\n            mowse_left_pressed  = (e.button == 1)\n            mowse_right_pressed = (e.button == 3)\n            mowse_left_held =  mowse_left_held or e.button == 1\n            mowse_right_held = mowse_right_held or e.button == 3\n          elif e.type == JOYAXISMOTION:\n            pass\n          elif e.type == JOYBALLMOTION:\n            pass\n          elif e.type == JOYHATMOTION:\n            pass\n          elif e.type == JOYBUTTONUP:\n            pass\n          elif e.type == JOYBUTTONDOWN:\n            pass\n          elif e.type == VIDEORESIZE:\n            print e\n            print \"What happened!?\"\n            #global big_black_rect, screen\n            #APPLICATION_w_size = e.size[0]\n            #APPLICATION_z_size = e.size[1]\n            #screen = pygame.display.set_mode((APPLICATION_w_size, APPLICATION_z_size))#, RESIZABLE)\n            #big_black_rect = pygame.Surface(screen.get_size())\n            #big_black_rect = big_black_rect.convert()\n            #big_black_rect.fill((0, 100, 200))\n          elif e.type == VIDEOEXPOSE:\n            pass\n          elif e.type == USEREVENT:\n            pass\n        if ky_held[27] and (ky_held[303] or ky_held[304]): loopy = 0\n    ## CHECK FOR: KEYBOARD, MOUSE, JOYSTICK, AND OTHERY INPUTY: ##\n ## KEYS AND MOUSE STUFF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\n\n#######################################################################################\n#######################################################################################\n#######################################################################################\n#######################################################################################\n#######################################################################################\n\n\n ## MAIN LOOPY STUFF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#########################################################################################\ndef ball_is_going_towards_ball(Bn1, Bn2):\n    global ball_max, ball_w, ball_z, ball_wol, ball_zol, ball_rad, ball_color, ball_mass, ball_RECT\n    arc_tangerine = arc_tangent_2D(ball_w[Bn1] - ball_w[Bn2], ball_z[Bn1] - ball_z[Bn2])\n    woly1, zoly1 = point_rotated_by_angle_2D(ball_wol[Bn1], ball_zol[Bn1], 0, 0, arc_tangerine)\n    return zoly1 &gt; 0\ndef ball_is_relatively_going_towards_ball(Bn1, Bn2):\n    global ball_max, ball_w, ball_z, ball_wol, ball_zol, ball_rad, ball_color, ball_mass, ball_RECT\n    arc_tangerine = arc_tangent_2D(ball_w[Bn1] - ball_w[Bn2], ball_z[Bn1] - ball_z[Bn2])\n    woly1, zoly1, woly2, zoly2 = points_rotated_by_angle_2D(((ball_wol[Bn1], ball_zol[Bn1]), (ball_wol[Bn2], ball_zol[Bn2])), 0, 0, arc_tangerine)\n    return zoly1 &gt; 0 and zoly1 &gt; zoly2  # zoly2 &lt; zoly1 or zoly2 &gt; zoly1 # zoly1 + zoly2 &gt; 0\n    #return zoly1 &gt; 0 or zoly1 &gt; zoly2\ndef Make_two_balls_hit_at_angle(Bn1, Bn2, angle):\n    global bounce_friction\n    #print angle\n    global ball_max, ball_w, ball_z, ball_wol, ball_zol, ball_rad, ball_color, ball_mass, ball_RECT\n    woly1, zoly1, woly2, zoly2 = points_rotated_by_angle_2D(((ball_wol[Bn1], ball_zol[Bn1]), (ball_wol[Bn2], ball_zol[Bn2])), 0, 0, angle)\n    V1 = zoly1 * bounce_friction\n    V2 = zoly2 * bounce_friction\n    zoly1, zoly2 = ball_to_ball_wzkol_bounce(V1, ball_mass[Bn1], V2, ball_mass[Bn2], True)\n    ball_wol[Bn1], ball_zol[Bn1], ball_wol[Bn2], ball_zol[Bn2] = points_rotated_by_angle_2D(((woly1, zoly1), (woly2, zoly2)), 0, 0, -angle)\n    updatey_ball_quick_rect(Bn1)\n    updatey_ball_quick_rect(Bn2)\ndef updatey_ball_quick_rect(B):\n    dia = ball_rad[B] * 2 + 4\n    ball_squar[B] = [ball_w[B] - ball_rad[B] - 2, ball_z[B] - ball_rad[B] - 2, dia, dia]\n    ball_RECT[B] = freaky_rect_switcharoo_2D(ball_w[B], ball_z[B], ball_wol[B], ball_zol[B], ball_rad[B] + 4)\ndef minus_ball_thing(n):\n    global ball_max, ball_w, ball_z, ball_wol, ball_zol, ball_rad, ball_color, ball_angle, ball_angleol, ball_squar, ball_mass, ball_RECT\n    if ball_max &gt;= 0:\n     del ball_w      [n]\n     del ball_z      [n]\n     del ball_wol    [n]\n     del ball_zol    [n]\n     del ball_rad    [n]\n     del ball_color  [n]\n     del ball_squar  [n]\n     del ball_angle  [n]\n     del ball_angleol[n]\n     del ball_mass   [n]\n     del ball_RECT   [n]\n     ball_max -= 1\ndef add_ball_thing(w, z, wol, zol, rad, color, angle, angleol, mass_thing, rect_thing):\n    global ball_max, ball_w, ball_z, ball_wol, ball_zol, ball_rad, ball_color, ball_squar, ball_angle, ball_angleol, ball_mass, ball_RECT\n    ball_max += 1\n    ball_w       += [w]\n    ball_z       += [z]\n    ball_wol     += [wol]\n    ball_zol     += [zol]\n    ball_rad     += [rad]\n    ball_color   += [color]\n    ball_angle   += [angle]\n    ball_angleol += [angleol]\n    dia = rad * 2\n    ball_squar += [[w - rad, z - rad, dia, dia]]\n    if mass_thing == True:\n     ball_mass += [4 / 3 * math.pi * rad * rad * rad]\n    else:\n     ball_mass += [mass_thing]\n    if rect_thing == True:\n     ball_RECT += [None]\n     updatey_ball_quick_rect(ball_max)\n     #ball_RECT += [freaky_rect_switcharoo_2D(w, z, wol, zol, rad)]\n    else:\n     ball_RECT += [rect_thing]\ndef minus_wall_thing(WAL):\n    global wall_max, wall_type, wall_w1, wall_z1, wall_w2, wall_z2, wall_rad, wall_color, wall_RECT\n    if wall_max &gt;= 0:\n     del wall_type   [WAL]\n     del wall_w1     [WAL]\n     del wall_z1     [WAL]\n     del wall_w2     [WAL]\n     del wall_z2     [WAL]\n     del wall_rad    [WAL]\n     del wall_color  [WAL]\n     del wall_RECT   [WAL]\n     wall_max        -= 1\ndef add_wall_thing(type, w1, z1, w2, z2, rad, color_thing, rect_thing):\n    global wall_max, wall_type, wall_w1, wall_z1, wall_w2, wall_z2, wall_rad, wall_color, wall_RECT\n    wall_max    += 1\n    wall_type   += [type]\n    wall_w1     += [w1]\n    wall_z1     += [z1]\n    wall_w2     += [w2]\n    wall_z2     += [z2]\n    wall_rad    += [rad]\n    if color_thing == True:\n     if   type == 1: color_thing = (220, 220, 220)\n     elif type == 2: color_thing = (240, 140, 130)\n     elif type == 3: color_thing = (100, 255, 100)\n     elif type == 4: color_thing = (255, 100, 100)\n     elif type == 5: color_thing = (100, 100, 255)\n    wall_color  += [color_thing]\n    if rect_thing == True:\n     wall_RECT   += [freaky_rect_switcharoo_2D(w1 - 2, z1 - 2, w2 - w1 + 4, z2 - z1 + 4, rad)]\n    else:\n     wall_RECT   += [rect_thing]\ndef reset_stuff():\n    global ball_max, ball_w, ball_z, ball_wol, ball_zol, ball_rad, ball_color, ball_angle, ball_angleol, ball_squar, ball_mass, ball_RECT\n    global wall_max, wall_type, wall_w1, wall_z1, wall_w2, wall_z2, wall_rad, wall_color, wall_RECT\n    global levely\n    if levely == 1:\n     ball_max     = -1\n     ball_w       = []\n     ball_z       = []\n     ball_wol     = []\n     ball_zol     = []\n     ball_rad     = []\n     ball_color   = []\n     ball_angle   = []\n     ball_angleol = []\n     ball_squar   = []\n     ball_mass    = []\n     ball_RECT    = []\n     #add_ball_thing(350, 300, 0, 0, 18, (230, 230, 250), 0, 0, True, True)\n     #add_ball_thing(150, 400, 0, 0, 40, (220, 210, 255), 0, 0, True, True)\n     #add_ball_thing(300, 150, 0, 0, 62, (110, 106, 255), 0, 0, True, True)\n     add_ball_thing(220, 200, 0, 0, 50, (180, 226, 255), 180, 0, True, True)\n     wall_max    = -1\n     wall_type   = []\n     wall_w1     = []\n     wall_z1     = []\n     wall_w2     = []\n     wall_z2     = []\n     wall_rad    = []\n     wall_color  = []\n     wall_RECT   = []\n     add_wall_thing(1, 160, 250, 300, 270,  1, True, True)\n     add_wall_thing(1, 500, 270, 600, 310,  1, True, True)\n     add_wall_thing(1, 200, 450, 600, 450, 10, True, True)\n     add_wall_thing(1, 300, 350, 400, 370,  5, True, True)\n     add_wall_thing(1, 300, 100, 400, 100, 20, True, True)\n     add_wall_thing(1, 650, 140, 700, 200,  6, True, True)\n     add_wall_thing(1, 650, 140, 600,  40,  6, True, True)\n     add_wall_thing(1, 150, 340, 150, 340, 30, True, True)\n     add_wall_thing(1,  40, 200,  40, 200, 30, True, True)\n     add_wall_thing(1,  30, 30,  30, 30, 10, True, True)\n     add_wall_thing(1,  30, 30,  30, 30, 10, True, True)\n     add_wall_thing(1,  30, 30,  30, 30, 10, True, True)\n     add_wall_thing(1,  30, 30,  30, 30, 10, True, True)\n     add_wall_thing(1,  30, 30,  30, 30, 10, True, True)\n     add_wall_thing(1,  0, 0, APPLICATION_w_size, 0, 5, True, True)\n     add_wall_thing(1,  0, 0, 0, APPLICATION_z_size, 5, True, True)\n     add_wall_thing(1,  0, APPLICATION_z_size, APPLICATION_w_size, APPLICATION_z_size, 5, True, True)\n     add_wall_thing(1,  APPLICATION_w_size, 0, APPLICATION_w_size, APPLICATION_z_size, 5, True, True)\n    elif levely == 2:\n     ball_max = 1\n     ball_w = [323.62638473709342, 384.72135876760257]\n     ball_z = [298.67896746658624, 109.24043981044279]\n     ball_wol = [-0.27396932987421913, 7.133321987715842]\n     ball_zol = [-0.38420912894762504, 1.6564147490246901]\n     ball_rad = [15, 28]\n     ball_color = [(137, 244, 234), (138, 221, 217)]\n     ball_angle = [51.908780125668613, 294.77431504891717]\n     ball_angleol = [-1.2400074168431123, 17.698615258690229]\n     ball_squar = [[306.62638473709342, 281.67896746658624, 34, 34], [354.72135876760257, 79.240439810442794, 60, 60]]\n     ball_mass = [10602.875205865552, 68964.24193160313]\n     ball_RECT = [[304.35241540721921, 279.2947583376386, 38.273969329874205, 38.384209128947646], [352.72135876760257, 77.240439810442794, 71.133321987715846, 65.656414749024691]]\n     wall_max = 17\n     wall_type = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n     wall_w1 = [189, 290, 166, 14, 697, 562, 643, 3, 0, 223, 117, 695, 497, 497, 0, 0, 0, 700]\n     wall_z1 = [284, 316, 436, 499, 446, 0, 128, 225, 106, 310, 155, 210, 159, 159, 0, 0, 500, 0]\n     wall_w2 = [222, 446, 697, 157, 377, 681, 679, 49, 383, 287, 5, 448, 376, 546, 700, 0, 700, 700]\n     wall_z2 = [301, 314, 478, 432, 487, 99, 98, 416, 171, 324, 225, 323, 147, 179, 0, 500, 500, 500]\n     wall_rad = [1, 1, 10, 5, 20, 6, 6, 30, 30, 10, 10, 10, 10, 10, 5, 5, 5, 5]\n     wall_color = [(220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220)]\n     wall_RECT = [[186, 281, 39, 23], [287, 313, 162, 4], [154, 424, 555, 66], [7, 429, 157, 73], [359, 424, 356, 85], [554, -8, 135, 115], [635, 94, 52, 38], [-29, 193, 110, 255], [-32, 74, 447, 129], [211, 298, 88, 38], [-3, 143, 128, 94], [440, 198, 263, 137], [368, 139, 137, 28], [485, 147, 73, 44], [-7, -7, 714, 14], [-7, -7, 14, 514], [-7, 493, 714, 14], [693, -7, 14, 514]]\n    elif levely == 3:\n     ball_max = 2\n     ball_w = [425.0, 492.31837629165733, 98.512856261065167]\n     ball_z = [126.0, 422.24553778829392, 430.4902396760661]\n     ball_wol = [-12.0, 2.6816237083426699, 6.487143738934833]\n     ball_zol = [-3.0, -1.245537788293916, -21.490239676066096]\n     ball_rad = [15, 28, 21]\n     ball_color = [(137, 244, 234), (138, 221, 217), (136, 235, 236)]\n     ball_angle = [93.833857527468922, 75.681742520058592, 323.2915629772819]\n     ball_angleol = [-0.87655530207419896, 0.30220691772972269, 1.1825329351046094]\n     ball_squar = [[408.0, 109.0, 34, 34], [462.31837629165733, 392.24553778829392, 60, 60], [75.512856261065167, 407.4902396760661, 46, 46]]\n     ball_mass = [10602.875205865552, 68964.24193160313, 29094.28956489508]\n     ball_RECT = [[394.0, 104.0, 50.0, 41.0], [460.31837629165733, 389.0, 66.68162370834267, 65.245537788293916], [73.512856261065167, 384.0, 56.487143738934833, 71.490239676066096]]\n     wall_max = 17\n     wall_type = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n     wall_w1 = [189, 290, 166, 14, 697, 562, 643, 3, 0, 223, 117, 695, 497, 497, 0, 0, 0, 700]\n     wall_z1 = [284, 316, 436, 499, 446, 0, 128, 225, 106, 310, 155, 210, 159, 159, 0, 0, 500, 0]\n     wall_w2 = [222, 446, 697, 157, 377, 681, 679, 49, 383, 287, 5, 480, 376, 546, 700, 0, 700, 700]\n     wall_z2 = [301, 314, 478, 432, 487, 99, 98, 416, 171, 324, 225, 325, 147, 179, 0, 500, 500, 500]\n     wall_rad = [1, 1, 10, 5, 20, 6, 6, 30, 30, 10, 10, 10, 10, 10, 5, 5, 5, 5]\n     wall_color = [(220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220)]\n     wall_RECT = [[186, 281, 39, 23], [287, 313, 162, 4], [154, 424, 555, 66], [7, 429, 157, 73], [359, 424, 356, 85], [554, -8, 135, 115], [635, 94, 52, 38], [-29, 193, 110, 255], [-32, 74, 447, 129], [211, 298, 88, 38], [-3, 143, 128, 94], [472, 198, 231, 139], [368, 139, 137, 28], [485, 147, 73, 44], [-7, -7, 714, 14], [-7, -7, 14, 514], [-7, 493, 714, 14], [693, -7, 14, 514]]\n    elif levely == 4:\n     ball_max = 15\n     ball_w = [60.722554805471077, 452.1573538490178, 80.244575784959252, 38.90004863123329, 526.62934623960155, 561.76077439217966, 51.00641675327735, 476.21179724447387, 74.019911348330012, 104.13986580489509, 77.672785567417591, 97.908669417930454, 492.31309851379422, 107.55531577343871, 25.677250467589708, 408.28461679522843]\n     ball_z = [123.53309256655999, 426.85562864865636, 446.98025958602022, 145.55077237791539, 432.36880616921724, 419.52605372165829, 185.76812996010321, 398.60172712183214, 227.90675893521163, 330.14246403509031, 280.7917430301959, 382.77488932204739, 431.7008452670733, 426.72875393133694, 108.86075181750218, 420.07030113046562]\n     ball_wol = [0.58974898201312453, 0.29357826379544644, -0.7453458908661944, -0.26977452024547638, -0.13077525550683244, 0.35703289164546842, 0.25581836770201244, -0.16968524576896582, -0.96858759109981474, 0.020541831638986374, 0.21623640500730243, 0.16869582232640204, -0.32778500262837312, -1.0423733543425631, 0.078384075232750969, 0.070169924397188832]\n     ball_zol = [2.5202528491916918, -0.067935899483811957, 1.0209651395893582, 1.5519551597452736, 0.37674466231734333, 0.7179102343171756, 1.2098558443319702, -0.21937811619009639, 1.6292902773669935, 0.95366629391114355, 0.99836183708718151, 0.65985328138026611, 0.72997687518744558, -0.33325230167901332, 1.8584237502130836, 1.1180771215980612]\n     ball_rad = [12, 20, 14, 19, 14, 23, 23, 13, 25, 28, 28, 25, 20, 20, 20, 24]\n     ball_color = [(132, 202, 208), (130, 220, 228), (133, 230, 241), (133, 200, 224), (138, 244, 248), (134, 176, 212), (132, 246, 206), (136, 191, 201), (130, 247, 204), (135, 190, 248), (136, 196, 244), (137, 246, 211), (132, 176, 232), (139, 200, 204), (135, 204, 206), (137, 234, 248)]\n     ball_angle = [250.64218161257492, 228.50285566079282, 169.93029421257162, 93.92451866434908, 160.53385135173758, 101.81391124171368, 58.682544988047297, 42.833392250734839, 278.96920717602609, 157.52451729820555, 104.82808146227505, 319.29094377305643, 8.3988066326588289, 61.303383965779759, 262.01723832271352, 187.75853100116501]\n     ball_angleol = [-11.145052526574146, 0.73910476098485844, -1.916370769365741, 7.8109934129380036, 1.2564621818214414, -0.21633250902344123, 0.96094866236460608, 18.696614939999161, -2.7765510174821686, -0.46915418861267033, 1.3615127061730832, 0.55215997018655683, 0.83188571652892485, -2.1096665563746759, 4.3536534603644128, 0.77565328887569629]\n     ball_squar = [[46.722554805471077, 109.53309256655999, 28, 28], [430.1573538490178, 404.85562864865636, 44, 44], [64.244575784959252, 430.98025958602022, 32, 32], [17.90004863123329, 124.55077237791539, 42, 42], [510.62934623960155, 416.36880616921724, 32, 32], [536.76077439217966, 394.52605372165829, 50, 50], [26.00641675327735, 160.76812996010321, 50, 50], [461.21179724447387, 383.60172712183214, 30, 30], [47.019911348330012, 200.90675893521163, 54, 54], [74.139865804895095, 300.14246403509031, 60, 60], [47.672785567417591, 250.7917430301959, 60, 60], [70.908669417930454, 355.77488932204739, 54, 54], [470.31309851379422, 409.7008452670733, 44, 44], [85.555315773438707, 404.72875393133694, 44, 44], [3.6772504675897082, 86.860751817502177, 44, 44], [382.28461679522843, 394.07030113046562, 52, 52]]\n     ball_mass = [5428.6721054031623, 25132.741228718347, 8620.5302414503913, 21548.184010972389, 8620.5302414503913, 38223.757816227015, 38223.757816227015, 6902.0790599367756, 49087.385212340516, 68964.24193160313, 68964.24193160313, 49087.385212340516, 25132.741228718347, 25132.741228718347, 25132.741228718347, 43429.376843225298]\n     tempy = [[24.00641675327735, 158.76812996010321, 54.255818367702012, 55.209855844331969], [459.04211199870491, 381.38234900564203, 34.16968524576896, 34.219378116190114], [44.051323757230193, 198.90675893521163, 58.968587591099819, 59.629290277366991], [72.139865804895095, 298.14246403509031, 64.02054183163898, 64.953666293911141], [45.672785567417591, 248.7917430301959, 64.216236405007308, 64.998361837087188], [68.908669417930454, 353.77488932204739, 58.168695822326399, 58.659853281380265], [467.98531351116583, 407.7008452670733, 48.327785002628389, 48.729976875187447], [82.512942419096149, 402.39550162965793, 49.042373354342558, 48.333252301679011], [1.6772504675897082, 84.860751817502177, 48.078384075232748, 49.858423750213085], [380.28461679522843, 392.07030113046562, 56.070169924397192, 57.118077121598063]]\n     ball_RECT = [[44.722554805471077, 107.53309256655999, 32.589748982013127, 34.520252849191692], [428.1573538490178, 402.78769274917255, 48.293578263795446, 48.067935899483814], [61.499229894093062, 428.98025958602022, 36.74534589086619, 37.020965139589357], [15.630274110987813, 122.55077237791539, 46.269774520245477, 47.551955159745276], [508.49857098409473, 414.36880616921724, 36.130775255506819, 36.376744662317343], [534.76077439217966, 392.52605372165829, 54.357032891645467, 54.717910234317173]] + tempy\n     del tempy\n     wall_max = 17\n     wall_type = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n     wall_w1 = [189, 196, 166, 14, 697, 562, 643, 0, 326, 51, 18, 695, 497, 497, 0, 0, 0, 700]\n     wall_z1 = [284, 221, 436, 499, 446, 0, 128, 201, 62, 9, 182, 210, 159, 159, 0, 0, 500, 0]\n     wall_w2 = [220, 297, 697, 157, 377, 681, 679, 49, 304, 139, 0, 480, 376, 524, 700, 0, 700, 700]\n     wall_z2 = [244, 218, 478, 432, 487, 99, 98, 416, 161, 315, 126, 325, 147, 176, 0, 500, 500, 500]\n     wall_rad = [1, 1, 10, 5, 20, 6, 6, 30, 30, 10, 10, 10, 10, 10, 5, 5, 5, 5]\n     wall_color = [(220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220)]\n     wall_RECT = [[186, 245, 37, 38], [193, 218, 107, 3], [154, 424, 555, 66], [7, 429, 157, 73], [359, 424, 356, 85], [554, -8, 135, 115], [635, 94, 52, 38], [-32, 169, 113, 279], [276, 30, 78, 163], [39, -3, 112, 330], [-8, 118, 34, 72], [472, 198, 231, 139], [368, 139, 137, 28], [485, 147, 51, 41], [-7, -7, 714, 14], [-7, -7, 14, 514], [-7, 493, 714, 14], [693, -7, 14, 514]]\n    elif levely == 5:\n     ball_max = 15\n     ball_w = [563.2380017184845, 135.5091931534665, 435.09697027584525, 132.51126304855137, 158.80356877160969, 486.49890666361813, 28.0454597909272, 469.94449157610796, 253.77058846375945, 33.311743878553251, 651.08671805489632, 467.4560139814393, 420.90145867058521, 248.83956419449743, 98.267666685148598, 670.85536291962285]\n     ball_z = [340.3499477728684, 192.53572614832325, 274.00276170743837, 474.72360924550071, 248.04392629767023, 199.66234253741388, 291.77486188629132, 98.828156873677884, 261.79870802935454, 452.90721309179793, 434.31611085503482, 422.84067516142846, 143.71750465032488, 474.55563009909457, 63.407930077910926, 97.5392796541895]\n     ball_wol = [-0.12736934788998625, -0.34670289908297647, -0.62730956112551528, -0.01316352118701539, -0.36875760413492498, 0.3253705975573648, -0.43186646985168864, 0.029829055857965088, -0.051399766840351885, 0.31143213467472303, 0.91261705660387604, -0.39289683694945782, 0.6973192899270082, -0.026739395385515136, 0.47773812365404217, -0.14449244329674141]\n     ball_zol = [0.2651067487506561, 0.33747092449158278, -0.20330004911815291, 0.11263669365628809, 0.62183969591811039, 0.220324713577495, 0.12382039798193512, -0.062689280803922554, 0.13756798955280808, 0.8702172500111478, -0.031277763984301599, 0.28378328194527458, 0.1666190295210413, 0.056074468995401638, 0.75422143538357722, 0.14790083350095956]\n     ball_rad = [12, 20, 14, 19, 14, 23, 23, 13, 25, 28, 28, 25, 20, 20, 20, 24]\n     ball_color = [(132, 202, 208), (130, 220, 228), (133, 230, 241), (133, 200, 224), (138, 244, 248), (134, 176, 212), (132, 246, 206), (136, 191, 201), (130, 247, 204), (135, 190, 248), (136, 196, 244), (137, 246, 211), (132, 176, 232), (139, 200, 204), (135, 204, 206), (137, 234, 248)]\n     ball_angle = [103.32400188884675, 316.71158855283181, 66.797426175129175, 35.509394217326573, 15.886531654813545, 0.61656478963343941, 195.33151301725019, 152.08747184390086, 199.80989069184068, 131.62120808048311, 339.38767654500623, 158.21789358507957, 322.31233400906359, 97.437869538449633, 179.6312883714439, 134.41162557033078]\n     ball_angleol = [0.54118695268280415, -1.0009948706990461, -0.42583251039327935, -0.049119552546591096, -1.7234897593393199, 0.1278122582140804, -0.33925087348758332, 0.98916269599321738, 0.054177225060088277, 0.93648329222661952, 2.0855948904138386, -1.2792816321392795, 1.9343475351789952, -0.094694117658838645, 1.3328174529019678, 1.0390947956294083]\n     ball_squar = [[549.2380017184845, 326.3499477728684, 28, 28], [113.5091931534665, 170.53572614832325, 44, 44], [419.09697027584525, 258.00276170743837, 32, 32], [111.51126304855137, 453.72360924550071, 42, 42], [142.80356877160969, 232.04392629767023, 32, 32], [461.49890666361813, 174.66234253741388, 50, 50], [3.0454597909272003, 266.77486188629132, 50, 50], [454.94449157610796, 83.828156873677884, 30, 30], [226.77058846375945, 234.79870802935454, 54, 54], [3.3117438785532514, 422.90721309179793, 60, 60], [621.08671805489632, 404.31611085503482, 60, 60], [440.4560139814393, 395.84067516142846, 54, 54], [398.90145867058521, 121.71750465032488, 44, 44], [226.83956419449743, 452.55563009909457, 44, 44], [76.267666685148598, 41.407930077910926, 44, 44], [644.85536291962285, 71.5392796541895, 52, 52]]\n     ball_mass = [5428.6721054031623, 25132.741228718347, 8620.5302414503913, 21548.184010972389, 8620.5302414503913, 38223.757816227015, 38223.757816227015, 6902.0790599367756, 49087.385212340516, 68964.24193160313, 68964.24193160313, 49087.385212340516, 25132.741228718347, 25132.741228718347, 25132.741228718347, 43429.376843225298]\n     tempy = [[140.43481116747478, 230.04392629767023, 36.368757604134913, 36.621839695918112], [459.49890666361813, 172.66234253741388, 54.325370597557367, 54.220324713577497], [0.61359332107551268, 264.77486188629132, 54.431866469851684, 54.123820397981937], [452.94449157610796, 81.765467592873961, 34.029829055857967, 34.062689280803923], [224.7191886969191, 232.79870802935454, 58.051399766840348, 58.137567989552807], [1.3117438785532514, 420.90721309179793, 64.311432134674718, 64.870217250011152], [619.08671805489632, 402.28483309105053, 64.912617056603878, 64.031277763984292], [438.06311714448987, 393.84067516142846, 58.392896836949433, 58.283783281945276], [396.90145867058521, 119.71750465032488, 48.697319289927009, 48.166619029521044], [224.81282479911192, 450.55563009909457, 48.026739395385505, 48.056074468995405], [74.267666685148598, 39.407930077910926, 48.477738123654042, 48.754221435383577], [642.71087047632614, 69.5392796541895, 56.144492443296713, 56.147900833500962]]\n     ball_RECT = [[547.11063237059454, 324.3499477728684, 32.127369347889953, 32.265106748750654], [111.16249025438353, 168.53572614832325, 48.34670289908297, 48.337470924491583], [416.46966071471974, 255.79946165832024, 36.627309561125514, 36.203300049118127], [109.49809952736436, 451.72360924550071, 46.01316352118701, 46.112636693656285]] + tempy\n     del tempy\n     wall_max = 17\n     wall_type = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n     wall_w1 = [135, 120, 230, 14, 531, 562, 441, 128, 403, 51, 504, 518, 377, 447, 0, 0, 0, 700]\n     wall_z1 = [265, 216, 439, 499, 339, 0, 217, 104, 306, 9, 441, 210, 168, 127, 0, 0, 500, 0]\n     wall_w2 = [227, 288, 697, 157, 456, 665, 476, 432, 61, 139, 633, 547, 435, 537, 700, 0, 700, 700]\n     wall_z2 = [262, 200, 478, 432, 302, 141, 228, 77, 334, 315, 295, 193, 178, 114, 0, 500, 500, 500]\n     wall_rad = [1, 1, 10, 5, 20, 6, 6, 30, 30, 10, 10, 10, 10, 10, 5, 5, 5, 5]\n     wall_color = [(220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220), (220, 220, 220)]\n     wall_RECT = [[132, 262, 98, 3], [117, 201, 174, 14], [218, 427, 491, 63], [7, 429, 157, 73], [438, 284, 111, 73], [554, -8, 119, 157], [433, 209, 51, 27], [96, 49, 368, 83], [33, 274, 398, 92], [39, -3, 112, 330], [492, 287, 153, 162], [506, 185, 53, 33], [365, 156, 82, 34], [435, 106, 114, 29], [-7, -7, 714, 14], [-7, -7, 14, 514], [-7, 493, 714, 14], [693, -7, 14, 514]]\ndef draw_walls_on_big_black_rect():\n    global wall_max, wall_type, wall_w1, wall_z1, wall_w2, wall_z2, wall_rad, wall_color, wall_RECT\n    global big_black_rect\n    global LIN_selected, CLICKER, CLICKER2\n    if CLICKER:\n     if LIN_selected != -1:\n      nnn = LIN_selected[0]\n      if LIN_selected[1] == 1:\n       wall_w1[nnn] = mowse_w\n       wall_z1[nnn] = mowse_z\n      else:\n       wall_w2[nnn] = mowse_w\n       wall_z2[nnn] = mowse_z\n      w1 = wall_w1[nnn]\n      z1 = wall_z1[nnn]\n      w2 = wall_w2[nnn]\n      z2 = wall_z2[nnn]\n      rad = wall_rad[nnn]\n      wall_RECT[nnn] = freaky_rect_switcharoo_2D(w1 - 2, z1 - 2, w2 - w1 + 4, z2 - z1 + 4, rad)\n    wl = -1\n    while wl &lt; wall_max:\n     wl += 1\n     w1 = wall_w1[wl]\n     z1 = wall_z1[wl]\n     w2 = wall_w2[wl]\n     z2 = wall_z2[wl]\n     rad = wall_rad[wl]\n     collyu = wall_color[wl]\n     pygame.draw.line(big_black_rect, collyu, (w1, z1), (w2, z2), rad * 2)\n     pygame.draw.circle(big_black_rect, collyu, (w1, z1), rad)\n     pygame.draw.circle(big_black_rect, collyu, (w2, z2), rad)\n     #pygame.draw.rect(big_black_rect, (200, 200, 200), wall_RECT[wl], 1)\n     if CLICKER2:\n      if mowse_in_rect(wall_RECT[wl][0], wall_RECT[wl][1], wall_RECT[wl][2], wall_RECT[wl][3]):\n       if   mowse_in_circle(w1, z1, rad+3): selected = -1; LIN_selected = [wl, 1]\n       elif mowse_in_circle(w2, z2, rad+3): selected = -1; LIN_selected = [wl, 2]\ndef Lets_ROLL():\n    global loopy\n    global ball_max, ball_w, ball_z, ball_wol, ball_zol, ball_rad, ball_color, ball_angle, ball_angleol, ball_squar, ball_mass, ball_RECT\n    global wall_max, wall_type, wall_w1, wall_z1, wall_w2, wall_z2, wall_rad, wall_color, wall_RECT\n    global bounce_friction, air_friction, gravity, rock_and_ROLLY\n    global LIN_selected, CLICKER, CLICKER2\n    global levely\n    levely = 3\n    bounce_friction = 0.8\n    #bounce_friction = 1.0\n    air_friction = 0.999\n    #air_friction = 1.0\n    gravity = 0.5\n    rock_and_ROLLY = math.pi / 8 * 180 #24\n    reset_stuff()\n    fontyyy = chilly_font_Italicy(24)\n    PRESS_SPACE_BAR_TO_MOVE_immy = fontyyy.render('Press SPACE BAR to start motion.', 0, (100, 200, 100))\n    PRESS_SPACE_BAR_TO_STOP_immy = fontyyy.render('Press SPACE BAR to stop motion.', 0, (200, 100, 100))\n    PRESS_ENTER_TO_RESET_immy    = fontyyy.render('Press ENTER to reset.', 0, (150, 150, 150))\n    PRESS_MINUS_TO_MINUS_immy    = fontyyy.render('Press - to delete a ball.', 0, (150, 150, 150))\n    PRESS_ADD_TO_ADD_immy        = fontyyy.render('Press + to add a ball.', 0, (150, 150, 150))\n    LEFT_CLICK_TO_immy           = fontyyy.render('Left click on a \"ghost ball\" to change its speed.', 0, (150, 150, 150))\n    RIGHT_CLICK_TO_immy          = fontyyy.render('Right click on a ball to stop its motion.', 0, (150, 150, 150))\n    PRESS_S_TO_immy              = fontyyy.render('Press S to stop all balls.', 0, (150, 150, 150))\n    PRESS_PAGE_UP_TO_immy        = fontyyy.render('Press Page Up to change the level.', 0, (150, 150, 150))\n    #message_1_immy\n    del fontyyy\n    #calculate_for_sure = True\n    selected = -1\n    LIN_selected = -1\n    move_stuff = True\n    t = time.time() + .01\n    CLICKER = False\n    CLICKER2 = False\n    loopy = 1\n    while loopy:\n          big_black_rect.fill((0, 0, 0))\n          draw_walls_on_big_black_rect()\n          screen.blit(big_black_rect, (0, 0))\n          check_for_keys()\n          CLICKER    = mowse_left_held\n          CLICKER2   = mowse_left_pressed\n          CLICKER_2  = mowse_right_held\n          CLICKER2_2 = mowse_right_pressed\n          if ky_first_held_CEV(32): move_stuff = not move_stuff\n          if ky_first_held_CEV(13): reset_stuff()\n          if ky_first_held_CEV(280):\n           levely += 1\n           if levely &gt; 5: levely = 1\n           reset_stuff()\n          if ky_first_held_CEV(115): # S\n            M = -1\n            while M &lt; ball_max:\n             M += 1\n             ball_wol[M] = 0\n             ball_zol[M] = 0\n             updatey_ball_quick_rect(M)\n          if ky_first_held_CEV(45) or ky_first_held_CEV(269): # -\n           minus_ball_thing(0)\n          if ky_first_held_CEV(61) or ky_first_held_CEV(270): # +\n           add_ball_thing(350 + randy(40, -20), 400 + randy(40, -20), randy(40, -20), randy(40, -20), int_randy(20, 10), (int_randy(10, 130), int_randy(80, 170), int_randy(50, 200)), 0, 0, True, True)\n          if ky_first_held_CEV(49):\n           listy  = ['Level_save']\n           listy += ['ball_max = ' + str(ball_max)]\n           listy += ['ball_w = ' + str(ball_w)]\n           listy += ['ball_z = ' + str(ball_z)]\n           listy += ['ball_wol = ' + str(ball_wol)]\n           listy += ['ball_zol = ' + str(ball_zol)]\n           listy += ['ball_rad = ' + str(ball_rad)]\n           listy += ['ball_color = ' + str(ball_color)]\n           listy += ['ball_angle = ' + str(ball_angle)]\n           listy += ['ball_angleol = ' + str(ball_angleol)]\n           listy += ['ball_squar = ' + str(ball_squar)]\n           listy += ['ball_mass = ' + str(ball_mass)]\n           listy += ['ball_RECT = ' + str(ball_RECT)]\n           listy += ['wall_max = ' + str(wall_max)]\n           listy += ['wall_type = ' + str(wall_type)]\n           listy += ['wall_w1 = ' + str(wall_w1)]\n           listy += ['wall_z1 = ' + str(wall_z1)]\n           listy += ['wall_w2 = ' + str(wall_w2)]\n           listy += ['wall_z2 = ' + str(wall_z2)]\n           listy += ['wall_rad = ' + str(wall_rad)]\n           listy += ['wall_color = ' + str(wall_color)]\n           listy += ['wall_RECT = ' + str(wall_RECT)]\n           ##write_to_file_WEEE_STRANGE(\"Level_Save.dat\", listy)\n           del listy\n          if CLICKER2:\n           allow_selectey_thing = True\n          else:\n           allow_selectey_thing = False\n           if not CLICKER:\n            selected = -1\n            LIN_selected = -1\n          to_be_selected = selected\n          M = -1\n          while M &lt; ball_max:\n           M += 1\n           if move_stuff:\n            move_ball(M)\n           wwol = int(ball_w[M] + ball_wol[M])\n           zzol = int(ball_z[M] + ball_zol[M])\n           pygame.draw.circle(screen, ball_color[M], (int(ball_w[M]), int(ball_z[M])), ball_rad[M])\n           blpw, blpz = point_rotated_by_angle_2D(0, -ball_rad[M], 0, 0, ball_angle[M])\n           pygame.draw.line(screen, (100, 100, 100), (int(ball_w[M] + blpw), int(ball_z[M] + blpz)), (int(ball_w[M]), int(ball_z[M])))\n           if not move_stuff:\n            pygame.draw.circle(screen, (100, 100, 250), (wwol, zzol), ball_rad[M], 1)\n            pygame.draw.circle(screen, (100, 100, 150), (wwol, zzol), int(ball_rad[M] * 1.0), 1)\n            pygame.draw.circle(screen, (150, 150, 200), (wwol, zzol), int(ball_rad[M] * 0.8), 1)\n            pygame.draw.circle(screen, (200, 200, 250), (wwol, zzol), int(ball_rad[M] * 0.5), 1)\n            pygame.draw.line(screen, (100, 160, 250), (int(ball_w[M]), int(ball_z[M])), (wwol, zzol))\n            pygame.draw.rect(screen, (130, 130, 130), ball_RECT[M], 1)\n            pygame.draw.rect(screen, (140, 140, 140), ball_squar[M], 1)\n           if allow_selectey_thing:\n            if mowse_in_rect(ball_RECT[M][0], ball_RECT[M][1], ball_RECT[M][2], ball_RECT[M][3]):\n             if mowse_in_circle(wwol, zzol, ball_rad[M]):\n              to_be_selected = M\n              LIN_selected = -1\n           if CLICKER_2:\n            if mowse_in_rect(ball_squar[M][0], ball_squar[M][1], ball_squar[M][2], ball_squar[M][3]):\n             if mowse_in_circle(ball_w[M], ball_z[M], ball_rad[M]):\n              ball_wol[M] = 0\n              ball_zol[M] = 0\n              ball_angleol[M] = 0\n              updatey_ball_quick_rect(M)\n           if CLICKER:\n            if selected == M:\n             if move_stuff:\n              mowseyy_w = mowse_w\n              mowseyy_z = mowse_z\n              bw1 = ball_rad[M]\n              bz1 = ball_rad[M]\n              bw2 = APPLICATION_w_size - ball_rad[M]\n              bz2 = APPLICATION_z_size - ball_rad[M]\n              if mowseyy_w &lt; bw1: mowseyy_w = bw1\n              if mowseyy_w &gt; bw2: mowseyy_w = bw2\n              if mowseyy_z &lt; bz1: mowseyy_z = bz1\n              if mowseyy_z &gt; bz2: mowseyy_z = bz2\n              ww = mowseyy_w - ball_w[M]\n              zz = mowseyy_z - ball_z[M]\n              #dissy = distance_2D(0, 0, ww, zz)\n              ball_wol[M] = ww # / 2.0 # / dissy\n              ball_zol[M] = zz # / 2.0 # / dissy\n             else:\n              ball_wol[M] = mowse_w - ball_w[M]\n              ball_zol[M] = mowse_z - ball_z[M]\n             updatey_ball_quick_rect(M)\n          selected = to_be_selected\n          if not move_stuff:\n           screen.blit(PRESS_SPACE_BAR_TO_MOVE_immy, (10, 10))\n          else:\n           screen.blit(PRESS_SPACE_BAR_TO_STOP_immy, (10, 10))\n          screen.blit(PRESS_MINUS_TO_MINUS_immy, (10, 30))\n          screen.blit(PRESS_ADD_TO_ADD_immy, (10, 50))\n          screen.blit(PRESS_ENTER_TO_RESET_immy, (10, 70))\n          screen.blit(LEFT_CLICK_TO_immy, (10, 90))\n          screen.blit(RIGHT_CLICK_TO_immy, (10, 110))\n          screen.blit(PRESS_S_TO_immy, (10, 130))\n          screen.blit(PRESS_PAGE_UP_TO_immy, (10, 150))\n          pygame.display.flip()\n          while t &gt; time.time(): pass\n          t = time.time() + .01\n # Try_Again_HE_HE Is weird!! maybe It should be deleted!!\ndef move_ball(M):\n            ball_angle[M] += ball_angleol[M]\n            if   ball_angle[M] &gt; 359: ball_angle[M] -= 360\n            elif ball_angle[M] &lt;   0: ball_angle[M] += 361\n            #movey_bally_speciality(M, ball_wol[M], ball_zol[M], 10)\n            movey_bally_speciality(M, ball_wol[M], ball_zol[M], 10)\n            ball_zol[M] += gravity\n            updatey_ball_quick_rect(M)\ndef movey_bally_speciality(M, wol_special, zol_special, Try_Again_HE_HE):\n            global loopy\n            global ball_max, ball_w, ball_z, ball_wol, ball_zol, ball_rad, ball_color, ball_angle, ball_angleol, ball_squar, ball_mass, ball_RECT\n            global wall_max, wall_type, wall_w1, wall_z1, wall_w2, wall_z2, wall_rad, wall_color, wall_RECT\n            global bounce_friction, air_friction, gravity, rock_and_ROLLY\n            distance_is_supposed_to_be_at = distance_2D(0, 0, wol_special, zol_special)\n            wa = ball_w[M]\n            za = ball_z[M]\n            #will_be_w = wa + ball_wol[M]\n            #will_be_z = za + ball_zol[M]\n            will_be_w = wa + wol_special\n            will_be_z = za + zol_special\n            LIN_collide_max = -1\n            LIN_collide_w    = []\n            LIN_collide_z     = []\n            LIN_collide_ang    = []\n            LIN_collide_dis     = []\n            LL = -1\n            while LL &lt; wall_max:\n              LL += 1\n              if rect_touching_rect2(ball_RECT[M][0], ball_RECT[M][1], ball_RECT[M][2], ball_RECT[M][3], wall_RECT[LL][0], wall_RECT[LL][1], wall_RECT[LL][2], wall_RECT[LL][3]):\n                  #print 'weee'\n                  did_collide, New_ball_w, New_ball_z, angle_hit_at = find_where_ball_collides_on_a_wall(wa, za, wol_special, zol_special, ball_rad[M], wall_type[LL], wall_w1[LL], wall_z1[LL], wall_w2[LL], wall_z2[LL], wall_rad[LL])\n                  if did_collide:\n                   #print 'collide'\n                   #print str(New_ball_w), str(New_ball_z)\n                   LIN_collide_max += 1\n                   LIN_collide_w    += [New_ball_w]\n                   LIN_collide_z     += [New_ball_z]\n                   LIN_collide_ang    += [angle_hit_at]\n                   LIN_collide_dis     += [distance_2D(wa, za, New_ball_w, New_ball_z)]\n            HEH_collide_max = -1\n            HEH_collide_w    = []\n            HEH_collide_z     = []\n            HEH_collide_ang    = []\n            HEH_collide_dis     = []\n            HEH_collide_ball_hit = []\n            M2 = -1\n            while M2 &lt; ball_max:\n             M2 += 1\n             if M2 != M:\n              if rect_touching_rect2(ball_RECT[M][0], ball_RECT[M][1], ball_RECT[M][2], ball_RECT[M][3], ball_squar[M2][0], ball_squar[M2][1], ball_squar[M2][2], ball_squar[M2][3]):\n                  #they_did_touch, New_ball1_w, New_ball1_z, angle_hit_at = find_where_ball_collides_on_another_ball(wa, za, ball_wol[M], ball_zol[M], ball_rad[M], ball_w[M2], ball_z[M2], ball_rad[M2])\n                  they_did_touch, New_ball1_w, New_ball1_z, angle_hit_at = find_where_ball_collides_on_another_ball(wa, za, wol_special, zol_special, ball_rad[M], ball_w[M2], ball_z[M2], ball_rad[M2])\n                  if they_did_touch:\n                   HEH_collide_max += 1\n                   HEH_collide_w    += [New_ball1_w]\n                   HEH_collide_z     += [New_ball1_z]\n                   HEH_collide_ang    += [angle_hit_at]\n                   HEH_collide_dis     += [distance_2D(wa, za, New_ball1_w, New_ball1_z)]\n                   HEH_collide_ball_hit += [M2]\n            current_dis = distance_is_supposed_to_be_at\n            Wall_to_hit_at_angley = None\n            Grr = -1\n            while Grr &lt; LIN_collide_max:\n             Grr += 1\n             #print LIN_collide_dis[Grr], current_dis\n             if LIN_collide_dis[Grr] &lt; current_dis:\n               #print 'weee!'\n               Wall_to_hit_at_angley = LIN_collide_ang[Grr]\n               current_dis = LIN_collide_dis[Grr]\n               will_be_w = LIN_collide_w[Grr]\n               will_be_z = LIN_collide_z[Grr]\n            Ball_to_hit = None\n            Ball_to_hit_at_angley = None\n            Heh = -1\n            while Heh &lt; HEH_collide_max:\n             Heh += 1\n             if HEH_collide_dis[Heh] &lt; current_dis:\n              if ball_is_going_towards_ball(M, HEH_collide_ball_hit[Heh]):\n               if ball_is_relatively_going_towards_ball(M, HEH_collide_ball_hit[Heh]):\n                Ball_to_hit = HEH_collide_ball_hit[Heh]\n                Ball_to_hit_at_angley = HEH_collide_ang[Heh]\n               else:\n                Ball_to_hit = None\n                Ball_to_hit_at_angley = None\n               current_dis = HEH_collide_dis[Heh]\n               will_be_w = HEH_collide_w[Heh]\n               will_be_z = HEH_collide_z[Heh]\n            if Ball_to_hit != None:\n             Make_two_balls_hit_at_angle(M, Ball_to_hit, Ball_to_hit_at_angley)\n            else:\n             #if   bouncey == 1: ball_wol[M] = -ball_wol[M] * bounce_friction\n             #elif bouncey == 2: ball_zol[M] = -ball_zol[M] * bounce_friction\n             if Wall_to_hit_at_angley != None:\n              ball_wol[M], ball_zol[M] = wzol_bounce_at_angle(ball_wol[M], ball_zol[M], Wall_to_hit_at_angley, bounce_friction)\n              ball_angleol[M] = zol_at_angle(ball_wol[M], ball_zol[M], Wall_to_hit_at_angley + 90) / ball_rad[M] * rock_and_ROLLY\n            ball_w[M] = will_be_w\n            ball_z[M] = will_be_z\n            if ball_w[M] &lt; 0 or ball_w[M] &gt; APPLICATION_w_size or ball_z[M] &lt; 0 or ball_z[M] &gt; APPLICATION_z_size:\n             #print str(M) + \"   \", str(wa), str(za)\n             print str(M) + \"   \", str(ball_w[M]), str(ball_z[M]), str(ball_rad[M])\n            ball_wol[M] *= air_friction\n            ball_zol[M] *= air_friction\n            updatey_ball_quick_rect(M)\n            if current_dis &lt; distance_is_supposed_to_be_at:\n             if Try_Again_HE_HE &gt; 0:\n              distance_to_travel_next = distance_is_supposed_to_be_at - current_dis\n              disy_HE_HE = distance_2D(0, 0, ball_wol[M], ball_zol[M])\n              next_wol = ball_wol[M]\n              next_zol = ball_zol[M]\n              movey_bally_speciality(M, next_wol, next_zol, Try_Again_HE_HE - 1)\n\n           ## Woah... Finally! Were near the end of the program! ##\nif __name__ == '__main__':\n  import math\n  import pygame\n  import random\n  import time\n  import gc\n  import copy\n  from   pygame.locals import *\n  if not pygame.font: print 'Warning, fonts disabled?'\n  if not pygame.mixer: print 'Warning, sound disabled?'\n  HE_HE_init()\n           ## THE END! ##", "user_title": "Anonymous", "datetimeon": "2007-12-23T15:46:20", "link": "pygame.draw.circle", "id": 1320}, {"content": "Guillame was confused on the nature of the last two arguments to Rect().\nhe thought that they were absolute coordinates, not width-height.\nThere isn't a bug with collidepoint.\nsee the pygame mailing list archives for the discussion with Guillame where this topic arose.", "user_title": "Anonymous", "datetimeon": "2007-04-25T17:52:17", "link": "Rect.collidepoint", "id": 524}, {"content": "I'm guessing they're key pressed (eg, the A or J keys) and the modifiers (Shift, Ctrl, Alt, Meta, Super, etc). Experiment to find details.", "user_title": "Anonymous", "datetimeon": "2007-04-26T17:03:55", "link": "pygame.event", "id": 528}, {"content": "I, too, get a list with a single item, None. This on Mac OS X 10.4 (Tiger) and Python 2.4.4; \npygame.ver returns '1.8.0pre'", "user_title": "Anonymous", "datetimeon": "2008-01-20T04:04:36", "link": "pygame.font.get_fonts", "id": 1428}, {"content": "The params units are in pixels.\nThe smallest unit for Pygame I think.\nIt doesn't make sense to change this to float.", "user_title": "Anonymous", "datetimeon": "2008-01-21T10:48:00", "link": "Rect.move_ip", "id": 1430}, {"content": "this resource is perfect for games with controls options\nbecause through it you can show the current input without creating a whole database of inputs\ntxt = font.render(pygame.key.name(current_key),True,(0,0,0))\nscreen.blit(txt,(0,0))", "user_title": "Anonymous", "datetimeon": "2008-01-21T20:04:03", "link": "pygame.key.name", "id": 1431}, {"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom pygame import *\nimport pygame, time, numpy, pygame.sndarray\n\nsample_rate = 44100\n\ndef play_for(sample_array, ms, volLeft, volRight):\n    sound = pygame.sndarray.make_sound(sample_array)\n    beg = time.time()\n    channel = sound.play(-1)\n    channel.set_volume(volLeft,volRight)\n    pygame.time.delay(ms)\n    sound.stop()\n    end = time.time()\n    return beg, end\n    \ndef sine_array_onecycle(hz, peak):\n    length = sample_rate / float(hz)\n    omega = numpy.pi * 2 / length\n    xvalues = numpy.arange(int(length)) * omega\n    return (peak * numpy.sin(xvalues))\n    \ndef sine_array(hz, peak, n_samples = sample_rate):\n    return numpy.resize(sine_array_onecycle(hz, peak), (n_samples,))\n\n    \ndef main():\n    pygame.mixer.pre_init(sample_rate, -16, 2) # 44.1kHz, 16-bit signed, stereo\n    pygame.init()\n    f = sine_array(8000, 1)\n    f = numpy.array(zip (f , f))\n\n    play_for(f , 5000, 0.2, 0.2)\n\nif __name__ == '__main__': main()", "user_title": "Anonymous", "datetimeon": "2011-05-27T02:36:07", "link": "pygame.sndarray", "id": 4057}]